
EEE3096S_2022_Prac_2_Delays_and_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000308c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031c4  080031c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031c4  080031c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031c4  080031c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031c4  080031c4  000131c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031c8  080031c8  000131c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  080031d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080031d8  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c54f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d70  00000000  00000000  0002c583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002e2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002ece0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011dc1  00000000  00000000  0002f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5b7  00000000  00000000  000413d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069d72  00000000  00000000  0004e988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b86fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002394  00000000  00000000  000b874c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003134 	.word	0x08003134

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003134 	.word	0x08003134

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f89f 	bl	800036c <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f82b 	bl	8000294 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f891 	bl	800036c <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f887 	bl	800036c <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f837 	bl	80002e0 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f82d 	bl	80002e0 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__eqsf2>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	0042      	lsls	r2, r0, #1
 8000298:	0245      	lsls	r5, r0, #9
 800029a:	024e      	lsls	r6, r1, #9
 800029c:	004c      	lsls	r4, r1, #1
 800029e:	0fc3      	lsrs	r3, r0, #31
 80002a0:	0a6d      	lsrs	r5, r5, #9
 80002a2:	2001      	movs	r0, #1
 80002a4:	0e12      	lsrs	r2, r2, #24
 80002a6:	0a76      	lsrs	r6, r6, #9
 80002a8:	0e24      	lsrs	r4, r4, #24
 80002aa:	0fc9      	lsrs	r1, r1, #31
 80002ac:	2aff      	cmp	r2, #255	; 0xff
 80002ae:	d006      	beq.n	80002be <__eqsf2+0x2a>
 80002b0:	2cff      	cmp	r4, #255	; 0xff
 80002b2:	d003      	beq.n	80002bc <__eqsf2+0x28>
 80002b4:	42a2      	cmp	r2, r4
 80002b6:	d101      	bne.n	80002bc <__eqsf2+0x28>
 80002b8:	42b5      	cmp	r5, r6
 80002ba:	d006      	beq.n	80002ca <__eqsf2+0x36>
 80002bc:	bd70      	pop	{r4, r5, r6, pc}
 80002be:	2d00      	cmp	r5, #0
 80002c0:	d1fc      	bne.n	80002bc <__eqsf2+0x28>
 80002c2:	2cff      	cmp	r4, #255	; 0xff
 80002c4:	d1fa      	bne.n	80002bc <__eqsf2+0x28>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d1f8      	bne.n	80002bc <__eqsf2+0x28>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d006      	beq.n	80002dc <__eqsf2+0x48>
 80002ce:	2001      	movs	r0, #1
 80002d0:	2a00      	cmp	r2, #0
 80002d2:	d1f3      	bne.n	80002bc <__eqsf2+0x28>
 80002d4:	0028      	movs	r0, r5
 80002d6:	1e43      	subs	r3, r0, #1
 80002d8:	4198      	sbcs	r0, r3
 80002da:	e7ef      	b.n	80002bc <__eqsf2+0x28>
 80002dc:	2000      	movs	r0, #0
 80002de:	e7ed      	b.n	80002bc <__eqsf2+0x28>

080002e0 <__gesf2>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	0042      	lsls	r2, r0, #1
 80002e4:	0245      	lsls	r5, r0, #9
 80002e6:	024e      	lsls	r6, r1, #9
 80002e8:	004c      	lsls	r4, r1, #1
 80002ea:	0fc3      	lsrs	r3, r0, #31
 80002ec:	0a6d      	lsrs	r5, r5, #9
 80002ee:	0e12      	lsrs	r2, r2, #24
 80002f0:	0a76      	lsrs	r6, r6, #9
 80002f2:	0e24      	lsrs	r4, r4, #24
 80002f4:	0fc8      	lsrs	r0, r1, #31
 80002f6:	2aff      	cmp	r2, #255	; 0xff
 80002f8:	d01b      	beq.n	8000332 <__gesf2+0x52>
 80002fa:	2cff      	cmp	r4, #255	; 0xff
 80002fc:	d00e      	beq.n	800031c <__gesf2+0x3c>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d11b      	bne.n	800033a <__gesf2+0x5a>
 8000302:	2c00      	cmp	r4, #0
 8000304:	d101      	bne.n	800030a <__gesf2+0x2a>
 8000306:	2e00      	cmp	r6, #0
 8000308:	d01c      	beq.n	8000344 <__gesf2+0x64>
 800030a:	2d00      	cmp	r5, #0
 800030c:	d00c      	beq.n	8000328 <__gesf2+0x48>
 800030e:	4283      	cmp	r3, r0
 8000310:	d01c      	beq.n	800034c <__gesf2+0x6c>
 8000312:	2102      	movs	r1, #2
 8000314:	1e58      	subs	r0, r3, #1
 8000316:	4008      	ands	r0, r1
 8000318:	3801      	subs	r0, #1
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	2e00      	cmp	r6, #0
 800031e:	d122      	bne.n	8000366 <__gesf2+0x86>
 8000320:	2a00      	cmp	r2, #0
 8000322:	d1f4      	bne.n	800030e <__gesf2+0x2e>
 8000324:	2d00      	cmp	r5, #0
 8000326:	d1f2      	bne.n	800030e <__gesf2+0x2e>
 8000328:	2800      	cmp	r0, #0
 800032a:	d1f6      	bne.n	800031a <__gesf2+0x3a>
 800032c:	2001      	movs	r0, #1
 800032e:	4240      	negs	r0, r0
 8000330:	e7f3      	b.n	800031a <__gesf2+0x3a>
 8000332:	2d00      	cmp	r5, #0
 8000334:	d117      	bne.n	8000366 <__gesf2+0x86>
 8000336:	2cff      	cmp	r4, #255	; 0xff
 8000338:	d0f0      	beq.n	800031c <__gesf2+0x3c>
 800033a:	2c00      	cmp	r4, #0
 800033c:	d1e7      	bne.n	800030e <__gesf2+0x2e>
 800033e:	2e00      	cmp	r6, #0
 8000340:	d1e5      	bne.n	800030e <__gesf2+0x2e>
 8000342:	e7e6      	b.n	8000312 <__gesf2+0x32>
 8000344:	2000      	movs	r0, #0
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e7      	beq.n	800031a <__gesf2+0x3a>
 800034a:	e7e2      	b.n	8000312 <__gesf2+0x32>
 800034c:	42a2      	cmp	r2, r4
 800034e:	dc05      	bgt.n	800035c <__gesf2+0x7c>
 8000350:	dbea      	blt.n	8000328 <__gesf2+0x48>
 8000352:	42b5      	cmp	r5, r6
 8000354:	d802      	bhi.n	800035c <__gesf2+0x7c>
 8000356:	d3e7      	bcc.n	8000328 <__gesf2+0x48>
 8000358:	2000      	movs	r0, #0
 800035a:	e7de      	b.n	800031a <__gesf2+0x3a>
 800035c:	4243      	negs	r3, r0
 800035e:	4158      	adcs	r0, r3
 8000360:	0040      	lsls	r0, r0, #1
 8000362:	3801      	subs	r0, #1
 8000364:	e7d9      	b.n	800031a <__gesf2+0x3a>
 8000366:	2002      	movs	r0, #2
 8000368:	4240      	negs	r0, r0
 800036a:	e7d6      	b.n	800031a <__gesf2+0x3a>

0800036c <__lesf2>:
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	0042      	lsls	r2, r0, #1
 8000370:	0245      	lsls	r5, r0, #9
 8000372:	024e      	lsls	r6, r1, #9
 8000374:	004c      	lsls	r4, r1, #1
 8000376:	0fc3      	lsrs	r3, r0, #31
 8000378:	0a6d      	lsrs	r5, r5, #9
 800037a:	0e12      	lsrs	r2, r2, #24
 800037c:	0a76      	lsrs	r6, r6, #9
 800037e:	0e24      	lsrs	r4, r4, #24
 8000380:	0fc8      	lsrs	r0, r1, #31
 8000382:	2aff      	cmp	r2, #255	; 0xff
 8000384:	d00b      	beq.n	800039e <__lesf2+0x32>
 8000386:	2cff      	cmp	r4, #255	; 0xff
 8000388:	d00d      	beq.n	80003a6 <__lesf2+0x3a>
 800038a:	2a00      	cmp	r2, #0
 800038c:	d11f      	bne.n	80003ce <__lesf2+0x62>
 800038e:	2c00      	cmp	r4, #0
 8000390:	d116      	bne.n	80003c0 <__lesf2+0x54>
 8000392:	2e00      	cmp	r6, #0
 8000394:	d114      	bne.n	80003c0 <__lesf2+0x54>
 8000396:	2000      	movs	r0, #0
 8000398:	2d00      	cmp	r5, #0
 800039a:	d010      	beq.n	80003be <__lesf2+0x52>
 800039c:	e009      	b.n	80003b2 <__lesf2+0x46>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d10c      	bne.n	80003bc <__lesf2+0x50>
 80003a2:	2cff      	cmp	r4, #255	; 0xff
 80003a4:	d113      	bne.n	80003ce <__lesf2+0x62>
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d108      	bne.n	80003bc <__lesf2+0x50>
 80003aa:	2a00      	cmp	r2, #0
 80003ac:	d008      	beq.n	80003c0 <__lesf2+0x54>
 80003ae:	4283      	cmp	r3, r0
 80003b0:	d012      	beq.n	80003d8 <__lesf2+0x6c>
 80003b2:	2102      	movs	r1, #2
 80003b4:	1e58      	subs	r0, r3, #1
 80003b6:	4008      	ands	r0, r1
 80003b8:	3801      	subs	r0, #1
 80003ba:	e000      	b.n	80003be <__lesf2+0x52>
 80003bc:	2002      	movs	r0, #2
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	2d00      	cmp	r5, #0
 80003c2:	d1f4      	bne.n	80003ae <__lesf2+0x42>
 80003c4:	2800      	cmp	r0, #0
 80003c6:	d1fa      	bne.n	80003be <__lesf2+0x52>
 80003c8:	2001      	movs	r0, #1
 80003ca:	4240      	negs	r0, r0
 80003cc:	e7f7      	b.n	80003be <__lesf2+0x52>
 80003ce:	2c00      	cmp	r4, #0
 80003d0:	d1ed      	bne.n	80003ae <__lesf2+0x42>
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1eb      	bne.n	80003ae <__lesf2+0x42>
 80003d6:	e7ec      	b.n	80003b2 <__lesf2+0x46>
 80003d8:	42a2      	cmp	r2, r4
 80003da:	dc05      	bgt.n	80003e8 <__lesf2+0x7c>
 80003dc:	dbf2      	blt.n	80003c4 <__lesf2+0x58>
 80003de:	42b5      	cmp	r5, r6
 80003e0:	d802      	bhi.n	80003e8 <__lesf2+0x7c>
 80003e2:	d3ef      	bcc.n	80003c4 <__lesf2+0x58>
 80003e4:	2000      	movs	r0, #0
 80003e6:	e7ea      	b.n	80003be <__lesf2+0x52>
 80003e8:	4243      	negs	r3, r0
 80003ea:	4158      	adcs	r0, r3
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	3801      	subs	r0, #1
 80003f0:	e7e5      	b.n	80003be <__lesf2+0x52>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_fmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0244      	lsls	r4, r0, #9
 80003fe:	0045      	lsls	r5, r0, #1
 8000400:	b5c0      	push	{r6, r7, lr}
 8000402:	0a64      	lsrs	r4, r4, #9
 8000404:	1c0f      	adds	r7, r1, #0
 8000406:	0e2d      	lsrs	r5, r5, #24
 8000408:	0fc6      	lsrs	r6, r0, #31
 800040a:	2d00      	cmp	r5, #0
 800040c:	d100      	bne.n	8000410 <__aeabi_fmul+0x1c>
 800040e:	e08d      	b.n	800052c <__aeabi_fmul+0x138>
 8000410:	2dff      	cmp	r5, #255	; 0xff
 8000412:	d100      	bne.n	8000416 <__aeabi_fmul+0x22>
 8000414:	e092      	b.n	800053c <__aeabi_fmul+0x148>
 8000416:	2300      	movs	r3, #0
 8000418:	2080      	movs	r0, #128	; 0x80
 800041a:	4699      	mov	r9, r3
 800041c:	469a      	mov	sl, r3
 800041e:	00e4      	lsls	r4, r4, #3
 8000420:	04c0      	lsls	r0, r0, #19
 8000422:	4304      	orrs	r4, r0
 8000424:	3d7f      	subs	r5, #127	; 0x7f
 8000426:	0278      	lsls	r0, r7, #9
 8000428:	0a43      	lsrs	r3, r0, #9
 800042a:	4698      	mov	r8, r3
 800042c:	007b      	lsls	r3, r7, #1
 800042e:	0e1b      	lsrs	r3, r3, #24
 8000430:	0fff      	lsrs	r7, r7, #31
 8000432:	2b00      	cmp	r3, #0
 8000434:	d100      	bne.n	8000438 <__aeabi_fmul+0x44>
 8000436:	e070      	b.n	800051a <__aeabi_fmul+0x126>
 8000438:	2bff      	cmp	r3, #255	; 0xff
 800043a:	d100      	bne.n	800043e <__aeabi_fmul+0x4a>
 800043c:	e086      	b.n	800054c <__aeabi_fmul+0x158>
 800043e:	4642      	mov	r2, r8
 8000440:	00d0      	lsls	r0, r2, #3
 8000442:	2280      	movs	r2, #128	; 0x80
 8000444:	3b7f      	subs	r3, #127	; 0x7f
 8000446:	18ed      	adds	r5, r5, r3
 8000448:	2300      	movs	r3, #0
 800044a:	04d2      	lsls	r2, r2, #19
 800044c:	4302      	orrs	r2, r0
 800044e:	4690      	mov	r8, r2
 8000450:	469c      	mov	ip, r3
 8000452:	0031      	movs	r1, r6
 8000454:	464b      	mov	r3, r9
 8000456:	4079      	eors	r1, r7
 8000458:	1c68      	adds	r0, r5, #1
 800045a:	2b0f      	cmp	r3, #15
 800045c:	d81c      	bhi.n	8000498 <__aeabi_fmul+0xa4>
 800045e:	4a76      	ldr	r2, [pc, #472]	; (8000638 <__aeabi_fmul+0x244>)
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	58d3      	ldr	r3, [r2, r3]
 8000464:	469f      	mov	pc, r3
 8000466:	0039      	movs	r1, r7
 8000468:	4644      	mov	r4, r8
 800046a:	46e2      	mov	sl, ip
 800046c:	4653      	mov	r3, sl
 800046e:	2b02      	cmp	r3, #2
 8000470:	d00f      	beq.n	8000492 <__aeabi_fmul+0x9e>
 8000472:	2b03      	cmp	r3, #3
 8000474:	d100      	bne.n	8000478 <__aeabi_fmul+0x84>
 8000476:	e0d7      	b.n	8000628 <__aeabi_fmul+0x234>
 8000478:	2b01      	cmp	r3, #1
 800047a:	d137      	bne.n	80004ec <__aeabi_fmul+0xf8>
 800047c:	2000      	movs	r0, #0
 800047e:	2400      	movs	r4, #0
 8000480:	05c0      	lsls	r0, r0, #23
 8000482:	4320      	orrs	r0, r4
 8000484:	07c9      	lsls	r1, r1, #31
 8000486:	4308      	orrs	r0, r1
 8000488:	bce0      	pop	{r5, r6, r7}
 800048a:	46ba      	mov	sl, r7
 800048c:	46b1      	mov	r9, r6
 800048e:	46a8      	mov	r8, r5
 8000490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000492:	20ff      	movs	r0, #255	; 0xff
 8000494:	2400      	movs	r4, #0
 8000496:	e7f3      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000498:	0c26      	lsrs	r6, r4, #16
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c22      	lsrs	r2, r4, #16
 800049e:	4644      	mov	r4, r8
 80004a0:	0424      	lsls	r4, r4, #16
 80004a2:	0c24      	lsrs	r4, r4, #16
 80004a4:	4643      	mov	r3, r8
 80004a6:	0027      	movs	r7, r4
 80004a8:	0c1b      	lsrs	r3, r3, #16
 80004aa:	4357      	muls	r7, r2
 80004ac:	4374      	muls	r4, r6
 80004ae:	435a      	muls	r2, r3
 80004b0:	435e      	muls	r6, r3
 80004b2:	1912      	adds	r2, r2, r4
 80004b4:	0c3b      	lsrs	r3, r7, #16
 80004b6:	189b      	adds	r3, r3, r2
 80004b8:	429c      	cmp	r4, r3
 80004ba:	d903      	bls.n	80004c4 <__aeabi_fmul+0xd0>
 80004bc:	2280      	movs	r2, #128	; 0x80
 80004be:	0252      	lsls	r2, r2, #9
 80004c0:	4694      	mov	ip, r2
 80004c2:	4466      	add	r6, ip
 80004c4:	043f      	lsls	r7, r7, #16
 80004c6:	041a      	lsls	r2, r3, #16
 80004c8:	0c3f      	lsrs	r7, r7, #16
 80004ca:	19d2      	adds	r2, r2, r7
 80004cc:	0194      	lsls	r4, r2, #6
 80004ce:	1e67      	subs	r7, r4, #1
 80004d0:	41bc      	sbcs	r4, r7
 80004d2:	0c1b      	lsrs	r3, r3, #16
 80004d4:	0e92      	lsrs	r2, r2, #26
 80004d6:	199b      	adds	r3, r3, r6
 80004d8:	4314      	orrs	r4, r2
 80004da:	019b      	lsls	r3, r3, #6
 80004dc:	431c      	orrs	r4, r3
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	d400      	bmi.n	80004e4 <__aeabi_fmul+0xf0>
 80004e2:	e09b      	b.n	800061c <__aeabi_fmul+0x228>
 80004e4:	2301      	movs	r3, #1
 80004e6:	0862      	lsrs	r2, r4, #1
 80004e8:	401c      	ands	r4, r3
 80004ea:	4314      	orrs	r4, r2
 80004ec:	0002      	movs	r2, r0
 80004ee:	327f      	adds	r2, #127	; 0x7f
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	dd64      	ble.n	80005be <__aeabi_fmul+0x1ca>
 80004f4:	0763      	lsls	r3, r4, #29
 80004f6:	d004      	beq.n	8000502 <__aeabi_fmul+0x10e>
 80004f8:	230f      	movs	r3, #15
 80004fa:	4023      	ands	r3, r4
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	d000      	beq.n	8000502 <__aeabi_fmul+0x10e>
 8000500:	3404      	adds	r4, #4
 8000502:	0123      	lsls	r3, r4, #4
 8000504:	d503      	bpl.n	800050e <__aeabi_fmul+0x11a>
 8000506:	0002      	movs	r2, r0
 8000508:	4b4c      	ldr	r3, [pc, #304]	; (800063c <__aeabi_fmul+0x248>)
 800050a:	3280      	adds	r2, #128	; 0x80
 800050c:	401c      	ands	r4, r3
 800050e:	2afe      	cmp	r2, #254	; 0xfe
 8000510:	dcbf      	bgt.n	8000492 <__aeabi_fmul+0x9e>
 8000512:	01a4      	lsls	r4, r4, #6
 8000514:	0a64      	lsrs	r4, r4, #9
 8000516:	b2d0      	uxtb	r0, r2
 8000518:	e7b2      	b.n	8000480 <__aeabi_fmul+0x8c>
 800051a:	4643      	mov	r3, r8
 800051c:	2b00      	cmp	r3, #0
 800051e:	d13d      	bne.n	800059c <__aeabi_fmul+0x1a8>
 8000520:	464a      	mov	r2, r9
 8000522:	3301      	adds	r3, #1
 8000524:	431a      	orrs	r2, r3
 8000526:	4691      	mov	r9, r2
 8000528:	469c      	mov	ip, r3
 800052a:	e792      	b.n	8000452 <__aeabi_fmul+0x5e>
 800052c:	2c00      	cmp	r4, #0
 800052e:	d129      	bne.n	8000584 <__aeabi_fmul+0x190>
 8000530:	2304      	movs	r3, #4
 8000532:	4699      	mov	r9, r3
 8000534:	3b03      	subs	r3, #3
 8000536:	2500      	movs	r5, #0
 8000538:	469a      	mov	sl, r3
 800053a:	e774      	b.n	8000426 <__aeabi_fmul+0x32>
 800053c:	2c00      	cmp	r4, #0
 800053e:	d11b      	bne.n	8000578 <__aeabi_fmul+0x184>
 8000540:	2308      	movs	r3, #8
 8000542:	4699      	mov	r9, r3
 8000544:	3b06      	subs	r3, #6
 8000546:	25ff      	movs	r5, #255	; 0xff
 8000548:	469a      	mov	sl, r3
 800054a:	e76c      	b.n	8000426 <__aeabi_fmul+0x32>
 800054c:	4643      	mov	r3, r8
 800054e:	35ff      	adds	r5, #255	; 0xff
 8000550:	2b00      	cmp	r3, #0
 8000552:	d10b      	bne.n	800056c <__aeabi_fmul+0x178>
 8000554:	2302      	movs	r3, #2
 8000556:	464a      	mov	r2, r9
 8000558:	431a      	orrs	r2, r3
 800055a:	4691      	mov	r9, r2
 800055c:	469c      	mov	ip, r3
 800055e:	e778      	b.n	8000452 <__aeabi_fmul+0x5e>
 8000560:	4653      	mov	r3, sl
 8000562:	0031      	movs	r1, r6
 8000564:	2b02      	cmp	r3, #2
 8000566:	d000      	beq.n	800056a <__aeabi_fmul+0x176>
 8000568:	e783      	b.n	8000472 <__aeabi_fmul+0x7e>
 800056a:	e792      	b.n	8000492 <__aeabi_fmul+0x9e>
 800056c:	2303      	movs	r3, #3
 800056e:	464a      	mov	r2, r9
 8000570:	431a      	orrs	r2, r3
 8000572:	4691      	mov	r9, r2
 8000574:	469c      	mov	ip, r3
 8000576:	e76c      	b.n	8000452 <__aeabi_fmul+0x5e>
 8000578:	230c      	movs	r3, #12
 800057a:	4699      	mov	r9, r3
 800057c:	3b09      	subs	r3, #9
 800057e:	25ff      	movs	r5, #255	; 0xff
 8000580:	469a      	mov	sl, r3
 8000582:	e750      	b.n	8000426 <__aeabi_fmul+0x32>
 8000584:	0020      	movs	r0, r4
 8000586:	f000 f8a9 	bl	80006dc <__clzsi2>
 800058a:	2576      	movs	r5, #118	; 0x76
 800058c:	1f43      	subs	r3, r0, #5
 800058e:	409c      	lsls	r4, r3
 8000590:	2300      	movs	r3, #0
 8000592:	426d      	negs	r5, r5
 8000594:	4699      	mov	r9, r3
 8000596:	469a      	mov	sl, r3
 8000598:	1a2d      	subs	r5, r5, r0
 800059a:	e744      	b.n	8000426 <__aeabi_fmul+0x32>
 800059c:	4640      	mov	r0, r8
 800059e:	f000 f89d 	bl	80006dc <__clzsi2>
 80005a2:	4642      	mov	r2, r8
 80005a4:	1f43      	subs	r3, r0, #5
 80005a6:	409a      	lsls	r2, r3
 80005a8:	2300      	movs	r3, #0
 80005aa:	1a2d      	subs	r5, r5, r0
 80005ac:	4690      	mov	r8, r2
 80005ae:	469c      	mov	ip, r3
 80005b0:	3d76      	subs	r5, #118	; 0x76
 80005b2:	e74e      	b.n	8000452 <__aeabi_fmul+0x5e>
 80005b4:	2480      	movs	r4, #128	; 0x80
 80005b6:	2100      	movs	r1, #0
 80005b8:	20ff      	movs	r0, #255	; 0xff
 80005ba:	03e4      	lsls	r4, r4, #15
 80005bc:	e760      	b.n	8000480 <__aeabi_fmul+0x8c>
 80005be:	2301      	movs	r3, #1
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	2b1b      	cmp	r3, #27
 80005c4:	dd00      	ble.n	80005c8 <__aeabi_fmul+0x1d4>
 80005c6:	e759      	b.n	800047c <__aeabi_fmul+0x88>
 80005c8:	0022      	movs	r2, r4
 80005ca:	309e      	adds	r0, #158	; 0x9e
 80005cc:	40da      	lsrs	r2, r3
 80005ce:	4084      	lsls	r4, r0
 80005d0:	0013      	movs	r3, r2
 80005d2:	1e62      	subs	r2, r4, #1
 80005d4:	4194      	sbcs	r4, r2
 80005d6:	431c      	orrs	r4, r3
 80005d8:	0763      	lsls	r3, r4, #29
 80005da:	d004      	beq.n	80005e6 <__aeabi_fmul+0x1f2>
 80005dc:	230f      	movs	r3, #15
 80005de:	4023      	ands	r3, r4
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d000      	beq.n	80005e6 <__aeabi_fmul+0x1f2>
 80005e4:	3404      	adds	r4, #4
 80005e6:	0163      	lsls	r3, r4, #5
 80005e8:	d51a      	bpl.n	8000620 <__aeabi_fmul+0x22c>
 80005ea:	2001      	movs	r0, #1
 80005ec:	2400      	movs	r4, #0
 80005ee:	e747      	b.n	8000480 <__aeabi_fmul+0x8c>
 80005f0:	2080      	movs	r0, #128	; 0x80
 80005f2:	03c0      	lsls	r0, r0, #15
 80005f4:	4204      	tst	r4, r0
 80005f6:	d009      	beq.n	800060c <__aeabi_fmul+0x218>
 80005f8:	4643      	mov	r3, r8
 80005fa:	4203      	tst	r3, r0
 80005fc:	d106      	bne.n	800060c <__aeabi_fmul+0x218>
 80005fe:	4644      	mov	r4, r8
 8000600:	4304      	orrs	r4, r0
 8000602:	0264      	lsls	r4, r4, #9
 8000604:	0039      	movs	r1, r7
 8000606:	20ff      	movs	r0, #255	; 0xff
 8000608:	0a64      	lsrs	r4, r4, #9
 800060a:	e739      	b.n	8000480 <__aeabi_fmul+0x8c>
 800060c:	2080      	movs	r0, #128	; 0x80
 800060e:	03c0      	lsls	r0, r0, #15
 8000610:	4304      	orrs	r4, r0
 8000612:	0264      	lsls	r4, r4, #9
 8000614:	0031      	movs	r1, r6
 8000616:	20ff      	movs	r0, #255	; 0xff
 8000618:	0a64      	lsrs	r4, r4, #9
 800061a:	e731      	b.n	8000480 <__aeabi_fmul+0x8c>
 800061c:	0028      	movs	r0, r5
 800061e:	e765      	b.n	80004ec <__aeabi_fmul+0xf8>
 8000620:	01a4      	lsls	r4, r4, #6
 8000622:	2000      	movs	r0, #0
 8000624:	0a64      	lsrs	r4, r4, #9
 8000626:	e72b      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000628:	2080      	movs	r0, #128	; 0x80
 800062a:	03c0      	lsls	r0, r0, #15
 800062c:	4304      	orrs	r4, r0
 800062e:	0264      	lsls	r4, r4, #9
 8000630:	20ff      	movs	r0, #255	; 0xff
 8000632:	0a64      	lsrs	r4, r4, #9
 8000634:	e724      	b.n	8000480 <__aeabi_fmul+0x8c>
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	0800316c 	.word	0x0800316c
 800063c:	f7ffffff 	.word	0xf7ffffff

08000640 <__aeabi_i2f>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	2800      	cmp	r0, #0
 8000644:	d013      	beq.n	800066e <__aeabi_i2f+0x2e>
 8000646:	17c3      	asrs	r3, r0, #31
 8000648:	18c6      	adds	r6, r0, r3
 800064a:	405e      	eors	r6, r3
 800064c:	0fc4      	lsrs	r4, r0, #31
 800064e:	0030      	movs	r0, r6
 8000650:	f000 f844 	bl	80006dc <__clzsi2>
 8000654:	239e      	movs	r3, #158	; 0x9e
 8000656:	0005      	movs	r5, r0
 8000658:	1a1b      	subs	r3, r3, r0
 800065a:	2b96      	cmp	r3, #150	; 0x96
 800065c:	dc0f      	bgt.n	800067e <__aeabi_i2f+0x3e>
 800065e:	2808      	cmp	r0, #8
 8000660:	dd01      	ble.n	8000666 <__aeabi_i2f+0x26>
 8000662:	3d08      	subs	r5, #8
 8000664:	40ae      	lsls	r6, r5
 8000666:	0276      	lsls	r6, r6, #9
 8000668:	0a76      	lsrs	r6, r6, #9
 800066a:	b2d8      	uxtb	r0, r3
 800066c:	e002      	b.n	8000674 <__aeabi_i2f+0x34>
 800066e:	2400      	movs	r4, #0
 8000670:	2000      	movs	r0, #0
 8000672:	2600      	movs	r6, #0
 8000674:	05c0      	lsls	r0, r0, #23
 8000676:	4330      	orrs	r0, r6
 8000678:	07e4      	lsls	r4, r4, #31
 800067a:	4320      	orrs	r0, r4
 800067c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800067e:	2b99      	cmp	r3, #153	; 0x99
 8000680:	dd0c      	ble.n	800069c <__aeabi_i2f+0x5c>
 8000682:	2205      	movs	r2, #5
 8000684:	0031      	movs	r1, r6
 8000686:	1a12      	subs	r2, r2, r0
 8000688:	40d1      	lsrs	r1, r2
 800068a:	000a      	movs	r2, r1
 800068c:	0001      	movs	r1, r0
 800068e:	0030      	movs	r0, r6
 8000690:	311b      	adds	r1, #27
 8000692:	4088      	lsls	r0, r1
 8000694:	1e41      	subs	r1, r0, #1
 8000696:	4188      	sbcs	r0, r1
 8000698:	4302      	orrs	r2, r0
 800069a:	0016      	movs	r6, r2
 800069c:	2d05      	cmp	r5, #5
 800069e:	dc12      	bgt.n	80006c6 <__aeabi_i2f+0x86>
 80006a0:	0031      	movs	r1, r6
 80006a2:	4f0d      	ldr	r7, [pc, #52]	; (80006d8 <__aeabi_i2f+0x98>)
 80006a4:	4039      	ands	r1, r7
 80006a6:	0772      	lsls	r2, r6, #29
 80006a8:	d009      	beq.n	80006be <__aeabi_i2f+0x7e>
 80006aa:	200f      	movs	r0, #15
 80006ac:	4030      	ands	r0, r6
 80006ae:	2804      	cmp	r0, #4
 80006b0:	d005      	beq.n	80006be <__aeabi_i2f+0x7e>
 80006b2:	3104      	adds	r1, #4
 80006b4:	014a      	lsls	r2, r1, #5
 80006b6:	d502      	bpl.n	80006be <__aeabi_i2f+0x7e>
 80006b8:	239f      	movs	r3, #159	; 0x9f
 80006ba:	4039      	ands	r1, r7
 80006bc:	1b5b      	subs	r3, r3, r5
 80006be:	0189      	lsls	r1, r1, #6
 80006c0:	0a4e      	lsrs	r6, r1, #9
 80006c2:	b2d8      	uxtb	r0, r3
 80006c4:	e7d6      	b.n	8000674 <__aeabi_i2f+0x34>
 80006c6:	1f6a      	subs	r2, r5, #5
 80006c8:	4096      	lsls	r6, r2
 80006ca:	0031      	movs	r1, r6
 80006cc:	4f02      	ldr	r7, [pc, #8]	; (80006d8 <__aeabi_i2f+0x98>)
 80006ce:	4039      	ands	r1, r7
 80006d0:	0772      	lsls	r2, r6, #29
 80006d2:	d0f4      	beq.n	80006be <__aeabi_i2f+0x7e>
 80006d4:	e7e9      	b.n	80006aa <__aeabi_i2f+0x6a>
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	fbffffff 	.word	0xfbffffff

080006dc <__clzsi2>:
 80006dc:	211c      	movs	r1, #28
 80006de:	2301      	movs	r3, #1
 80006e0:	041b      	lsls	r3, r3, #16
 80006e2:	4298      	cmp	r0, r3
 80006e4:	d301      	bcc.n	80006ea <__clzsi2+0xe>
 80006e6:	0c00      	lsrs	r0, r0, #16
 80006e8:	3910      	subs	r1, #16
 80006ea:	0a1b      	lsrs	r3, r3, #8
 80006ec:	4298      	cmp	r0, r3
 80006ee:	d301      	bcc.n	80006f4 <__clzsi2+0x18>
 80006f0:	0a00      	lsrs	r0, r0, #8
 80006f2:	3908      	subs	r1, #8
 80006f4:	091b      	lsrs	r3, r3, #4
 80006f6:	4298      	cmp	r0, r3
 80006f8:	d301      	bcc.n	80006fe <__clzsi2+0x22>
 80006fa:	0900      	lsrs	r0, r0, #4
 80006fc:	3904      	subs	r1, #4
 80006fe:	a202      	add	r2, pc, #8	; (adr r2, 8000708 <__clzsi2+0x2c>)
 8000700:	5c10      	ldrb	r0, [r2, r0]
 8000702:	1840      	adds	r0, r0, r1
 8000704:	4770      	bx	lr
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	02020304 	.word	0x02020304
 800070c:	01010101 	.word	0x01010101
	...

08000718 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 fb04 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f818 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f906 	bl	8000934 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000728:	f000 f876 	bl	8000818 <MX_I2C1_Init>
  MX_DMA_Init();
 800072c:	f000 f8e4 	bl	80008f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000730:	f000 f8b2 	bl	8000898 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */
	//TO DO:
	//TASK 1
	//First run this with nothing else in the loop and scope pin PC8 on an oscilloscope
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	4a05      	ldr	r2, [pc, #20]	; (8000750 <main+0x38>)
 800073a:	0019      	movs	r1, r3
 800073c:	0010      	movs	r0, r2
 800073e:	f000 ff46 	bl	80015ce <HAL_GPIO_TogglePin>
	pause_sec(1.00);
 8000742:	23fe      	movs	r3, #254	; 0xfe
 8000744:	059b      	lsls	r3, r3, #22
 8000746:	1c18      	adds	r0, r3, #0
 8000748:	f000 f96c 	bl	8000a24 <pause_sec>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800074c:	e7f2      	b.n	8000734 <main+0x1c>
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	48000800 	.word	0x48000800

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b097      	sub	sp, #92	; 0x5c
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	2428      	movs	r4, #40	; 0x28
 800075c:	193b      	adds	r3, r7, r4
 800075e:	0018      	movs	r0, r3
 8000760:	2330      	movs	r3, #48	; 0x30
 8000762:	001a      	movs	r2, r3
 8000764:	2100      	movs	r1, #0
 8000766:	f002 fcdd 	bl	8003124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076a:	2318      	movs	r3, #24
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	0018      	movs	r0, r3
 8000770:	2310      	movs	r3, #16
 8000772:	001a      	movs	r2, r3
 8000774:	2100      	movs	r1, #0
 8000776:	f002 fcd5 	bl	8003124 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	0018      	movs	r0, r3
 800077e:	2314      	movs	r3, #20
 8000780:	001a      	movs	r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	f002 fcce 	bl	8003124 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	0021      	movs	r1, r4
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2202      	movs	r2, #2
 800078e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2201      	movs	r2, #1
 8000794:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2210      	movs	r2, #16
 800079a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2202      	movs	r2, #2
 80007a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	22a0      	movs	r2, #160	; 0xa0
 80007ac:	0392      	lsls	r2, r2, #14
 80007ae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2200      	movs	r2, #0
 80007b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	0018      	movs	r0, r3
 80007ba:	f001 f851 	bl	8001860 <HAL_RCC_OscConfig>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007c2:	f000 f95b 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	2118      	movs	r1, #24
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2207      	movs	r2, #7
 80007cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2202      	movs	r2, #2
 80007d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2101      	movs	r1, #1
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 fb55 	bl	8001e94 <HAL_RCC_ClockConfig>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ee:	f000 f945 	bl	8000a7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2220      	movs	r2, #32
 80007f6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	0018      	movs	r0, r3
 8000802:	f001 fc99 	bl	8002138 <HAL_RCCEx_PeriphCLKConfig>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800080a:	f000 f937 	bl	8000a7c <Error_Handler>
  }
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b017      	add	sp, #92	; 0x5c
 8000814:	bd90      	pop	{r4, r7, pc}
	...

08000818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_I2C1_Init+0x74>)
 800081e:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <MX_I2C1_Init+0x78>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_I2C1_Init+0x74>)
 8000824:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <MX_I2C1_Init+0x7c>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_I2C1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_I2C1_Init+0x74>)
 8000830:	2201      	movs	r2, #1
 8000832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_I2C1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_I2C1_Init+0x74>)
 8000854:	0018      	movs	r0, r3
 8000856:	f000 fed5 	bl	8001604 <HAL_I2C_Init>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800085e:	f000 f90d 	bl	8000a7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_I2C1_Init+0x74>)
 8000864:	2100      	movs	r1, #0
 8000866:	0018      	movs	r0, r3
 8000868:	f000 ff62 	bl	8001730 <HAL_I2CEx_ConfigAnalogFilter>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000870:	f000 f904 	bl	8000a7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <MX_I2C1_Init+0x74>)
 8000876:	2100      	movs	r1, #0
 8000878:	0018      	movs	r0, r3
 800087a:	f000 ffa5 	bl	80017c8 <HAL_I2CEx_ConfigDigitalFilter>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000882:	f000 f8fb 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000028 	.word	0x20000028
 8000890:	40005400 	.word	0x40005400
 8000894:	2000090e 	.word	0x2000090e

08000898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 800089e:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <MX_USART2_UART_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008a4:	2296      	movs	r2, #150	; 0x96
 80008a6:	0192      	lsls	r2, r2, #6
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <MX_USART2_UART_Init+0x58>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f001 fd09 	bl	80022f4 <HAL_UART_Init>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008e6:	f000 f8c9 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000074 	.word	0x20000074
 80008f4:	40004400 	.word	0x40004400

080008f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_DMA_Init+0x38>)
 8000900:	695a      	ldr	r2, [r3, #20]
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_DMA_Init+0x38>)
 8000904:	2101      	movs	r1, #1
 8000906:	430a      	orrs	r2, r1
 8000908:	615a      	str	r2, [r3, #20]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_DMA_Init+0x38>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	2201      	movs	r2, #1
 8000910:	4013      	ands	r3, r2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	200b      	movs	r0, #11
 800091c:	f000 fb14 	bl	8000f48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000920:	200b      	movs	r0, #11
 8000922:	f000 fb26 	bl	8000f72 <HAL_NVIC_EnableIRQ>

}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	40021000 	.word	0x40021000

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b08b      	sub	sp, #44	; 0x2c
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	2414      	movs	r4, #20
 800093c:	193b      	adds	r3, r7, r4
 800093e:	0018      	movs	r0, r3
 8000940:	2314      	movs	r3, #20
 8000942:	001a      	movs	r2, r3
 8000944:	2100      	movs	r1, #0
 8000946:	f002 fbed 	bl	8003124 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094a:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <MX_GPIO_Init+0xe8>)
 800094c:	695a      	ldr	r2, [r3, #20]
 800094e:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <MX_GPIO_Init+0xe8>)
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	03c9      	lsls	r1, r1, #15
 8000954:	430a      	orrs	r2, r1
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <MX_GPIO_Init+0xe8>)
 800095a:	695a      	ldr	r2, [r3, #20]
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	03db      	lsls	r3, r3, #15
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <MX_GPIO_Init+0xe8>)
 8000968:	695a      	ldr	r2, [r3, #20]
 800096a:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <MX_GPIO_Init+0xe8>)
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	0289      	lsls	r1, r1, #10
 8000970:	430a      	orrs	r2, r1
 8000972:	615a      	str	r2, [r3, #20]
 8000974:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <MX_GPIO_Init+0xe8>)
 8000976:	695a      	ldr	r2, [r3, #20]
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	029b      	lsls	r3, r3, #10
 800097c:	4013      	ands	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <MX_GPIO_Init+0xe8>)
 8000984:	695a      	ldr	r2, [r3, #20]
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <MX_GPIO_Init+0xe8>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0309      	lsls	r1, r1, #12
 800098c:	430a      	orrs	r2, r1
 800098e:	615a      	str	r2, [r3, #20]
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_GPIO_Init+0xe8>)
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	031b      	lsls	r3, r3, #12
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_GPIO_Init+0xe8>)
 80009a0:	695a      	ldr	r2, [r3, #20]
 80009a2:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_GPIO_Init+0xe8>)
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	02c9      	lsls	r1, r1, #11
 80009a8:	430a      	orrs	r2, r1
 80009aa:	615a      	str	r2, [r3, #20]
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_GPIO_Init+0xe8>)
 80009ae:	695a      	ldr	r2, [r3, #20]
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	02db      	lsls	r3, r3, #11
 80009b4:	4013      	ands	r3, r2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009ba:	23c0      	movs	r3, #192	; 0xc0
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4818      	ldr	r0, [pc, #96]	; (8000a20 <MX_GPIO_Init+0xec>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	0019      	movs	r1, r3
 80009c4:	f000 fde6 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2201      	movs	r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	2290      	movs	r2, #144	; 0x90
 80009d2:	0352      	lsls	r2, r2, #13
 80009d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009dc:	193a      	adds	r2, r7, r4
 80009de:	2390      	movs	r3, #144	; 0x90
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fc65 	bl	80012b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80009ea:	0021      	movs	r1, r4
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	22c0      	movs	r2, #192	; 0xc0
 80009f0:	0092      	lsls	r2, r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2201      	movs	r2, #1
 80009f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <MX_GPIO_Init+0xec>)
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	0010      	movs	r0, r2
 8000a0e:	f000 fc51 	bl	80012b4 <HAL_GPIO_Init>

}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b00b      	add	sp, #44	; 0x2c
 8000a18:	bd90      	pop	{r4, r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000800 	.word	0x48000800

08000a24 <pause_sec>:

/* USER CODE BEGIN 4 */
void pause_sec(float x)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	//TASK 2
	//Make sure you've defined DELAY1 and DELAY2 in the private define section

	//YOUR CODE HERE

	for (int i = 0; i <= DELAY1; i++){
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	e017      	b.n	8000a62 <pause_sec+0x3e>
		for (int j = 0; j <= DELAY2*x; j++) {
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	e002      	b.n	8000a3e <pause_sec+0x1a>
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68b8      	ldr	r0, [r7, #8]
 8000a40:	f7ff fdfe 	bl	8000640 <__aeabi_i2f>
 8000a44:	1c04      	adds	r4, r0, #0
 8000a46:	490c      	ldr	r1, [pc, #48]	; (8000a78 <pause_sec+0x54>)
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff fcd3 	bl	80003f4 <__aeabi_fmul>
 8000a4e:	1c03      	adds	r3, r0, #0
 8000a50:	1c19      	adds	r1, r3, #0
 8000a52:	1c20      	adds	r0, r4, #0
 8000a54:	f7ff fc00 	bl	8000258 <__aeabi_fcmple>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d1ed      	bne.n	8000a38 <pause_sec+0x14>
	for (int i = 0; i <= DELAY1; i++){
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	23eb      	movs	r3, #235	; 0xeb
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dde2      	ble.n	8000a32 <pause_sec+0xe>
			//Do nothing
		}
	}
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b005      	add	sp, #20
 8000a74:	bd90      	pop	{r4, r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	42c80000 	.word	0x42c80000

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x44>)
 8000a90:	699a      	ldr	r2, [r3, #24]
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_MspInit+0x44>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	430a      	orrs	r2, r1
 8000a98:	619a      	str	r2, [r3, #24]
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_MspInit+0x44>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x44>)
 8000aa8:	69da      	ldr	r2, [r3, #28]
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_MspInit+0x44>)
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	0549      	lsls	r1, r1, #21
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	61da      	str	r2, [r3, #28]
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_MspInit+0x44>)
 8000ab6:	69da      	ldr	r2, [r3, #28]
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	055b      	lsls	r3, r3, #21
 8000abc:	4013      	ands	r3, r2
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b002      	add	sp, #8
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b08b      	sub	sp, #44	; 0x2c
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	2414      	movs	r4, #20
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	0018      	movs	r0, r3
 8000ade:	2314      	movs	r3, #20
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f002 fb1e 	bl	8003124 <memset>
  if(hi2c->Instance==I2C1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <HAL_I2C_MspInit+0x90>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d131      	bne.n	8000b56 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_I2C_MspInit+0x94>)
 8000af4:	695a      	ldr	r2, [r3, #20]
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <HAL_I2C_MspInit+0x94>)
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	02c9      	lsls	r1, r1, #11
 8000afc:	430a      	orrs	r2, r1
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_I2C_MspInit+0x94>)
 8000b02:	695a      	ldr	r2, [r3, #20]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	02db      	lsls	r3, r3, #11
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b0e:	0021      	movs	r1, r4
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	22c0      	movs	r2, #192	; 0xc0
 8000b14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2212      	movs	r2, #18
 8000b1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2203      	movs	r2, #3
 8000b26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <HAL_I2C_MspInit+0x98>)
 8000b32:	0019      	movs	r1, r3
 8000b34:	0010      	movs	r0, r2
 8000b36:	f000 fbbd 	bl	80012b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_I2C_MspInit+0x94>)
 8000b3c:	69da      	ldr	r2, [r3, #28]
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_I2C_MspInit+0x94>)
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	0389      	lsls	r1, r1, #14
 8000b44:	430a      	orrs	r2, r1
 8000b46:	61da      	str	r2, [r3, #28]
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_I2C_MspInit+0x94>)
 8000b4a:	69da      	ldr	r2, [r3, #28]
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	039b      	lsls	r3, r3, #14
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b00b      	add	sp, #44	; 0x2c
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	40005400 	.word	0x40005400
 8000b64:	40021000 	.word	0x40021000
 8000b68:	48000400 	.word	0x48000400

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b08b      	sub	sp, #44	; 0x2c
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	2414      	movs	r4, #20
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	0018      	movs	r0, r3
 8000b7a:	2314      	movs	r3, #20
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f002 fad0 	bl	8003124 <memset>
  if(huart->Instance==USART2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a33      	ldr	r2, [pc, #204]	; (8000c58 <HAL_UART_MspInit+0xec>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d160      	bne.n	8000c50 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8e:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <HAL_UART_MspInit+0xf0>)
 8000b90:	69da      	ldr	r2, [r3, #28]
 8000b92:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <HAL_UART_MspInit+0xf0>)
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	0289      	lsls	r1, r1, #10
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	61da      	str	r2, [r3, #28]
 8000b9c:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <HAL_UART_MspInit+0xf0>)
 8000b9e:	69da      	ldr	r2, [r3, #28]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	029b      	lsls	r3, r3, #10
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <HAL_UART_MspInit+0xf0>)
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <HAL_UART_MspInit+0xf0>)
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	0289      	lsls	r1, r1, #10
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <HAL_UART_MspInit+0xf0>)
 8000bba:	695a      	ldr	r2, [r3, #20]
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	029b      	lsls	r3, r3, #10
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bc6:	0021      	movs	r1, r4
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	220c      	movs	r2, #12
 8000bcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2203      	movs	r2, #3
 8000bde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2201      	movs	r2, #1
 8000be4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	187a      	adds	r2, r7, r1
 8000be8:	2390      	movs	r3, #144	; 0x90
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	0011      	movs	r1, r2
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 fb60 	bl	80012b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <HAL_UART_MspInit+0xf4>)
 8000bf6:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <HAL_UART_MspInit+0xf8>)
 8000bf8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <HAL_UART_MspInit+0xf4>)
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_UART_MspInit+0xf4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_UART_MspInit+0xf4>)
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_UART_MspInit+0xf4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <HAL_UART_MspInit+0xf4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_UART_MspInit+0xf4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_UART_MspInit+0xf4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_UART_MspInit+0xf4>)
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 f9c0 	bl	8000fac <HAL_DMA_Init>
 8000c2c:	1e03      	subs	r3, r0, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000c30:	f7ff ff24 	bl	8000a7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_UART_MspInit+0xf4>)
 8000c38:	66da      	str	r2, [r3, #108]	; 0x6c
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_UART_MspInit+0xf4>)
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	201c      	movs	r0, #28
 8000c46:	f000 f97f 	bl	8000f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c4a:	201c      	movs	r0, #28
 8000c4c:	f000 f991 	bl	8000f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b00b      	add	sp, #44	; 0x2c
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	40004400 	.word	0x40004400
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	200000f8 	.word	0x200000f8
 8000c64:	40020044 	.word	0x40020044

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8c:	f000 f894 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <DMA1_Channel4_5_IRQHandler+0x14>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 fa49 	bl	8001136 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	200000f8 	.word	0x200000f8

08000cb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <USART2_IRQHandler+0x14>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f001 fb70 	bl	800239c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000074 	.word	0x20000074

08000cc8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490e      	ldr	r1, [pc, #56]	; (8000d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0b      	ldr	r4, [pc, #44]	; (8000d20 <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cfe:	f7ff ffe3 	bl	8000cc8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d02:	f002 f9eb 	bl	80030dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d06:	f7ff fd07 	bl	8000718 <main>

08000d0a <LoopForever>:

LoopForever:
    b LoopForever
 8000d0a:	e7fe      	b.n	8000d0a <LoopForever>
  ldr   r0, =_estack
 8000d0c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d18:	080031cc 	.word	0x080031cc
  ldr r2, =_sbss
 8000d1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d20:	20000140 	.word	0x20000140

08000d24 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC1_COMP_IRQHandler>
	...

08000d28 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_Init+0x24>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_Init+0x24>)
 8000d32:	2110      	movs	r1, #16
 8000d34:	430a      	orrs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f000 f809 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3e:	f7ff fea3 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	40022000 	.word	0x40022000

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_InitTick+0x5c>)
 8000d5a:	681c      	ldr	r4, [r3, #0]
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_InitTick+0x60>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	0019      	movs	r1, r3
 8000d62:	23fa      	movs	r3, #250	; 0xfa
 8000d64:	0098      	lsls	r0, r3, #2
 8000d66:	f7ff f9cf 	bl	8000108 <__udivsi3>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	0020      	movs	r0, r4
 8000d70:	f7ff f9ca 	bl	8000108 <__udivsi3>
 8000d74:	0003      	movs	r3, r0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 f90b 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e00f      	b.n	8000da4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d80b      	bhi.n	8000da2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	425b      	negs	r3, r3
 8000d90:	2200      	movs	r2, #0
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 f8d8 	bl	8000f48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_InitTick+0x64>)
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b003      	add	sp, #12
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x1c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	18d2      	adds	r2, r2, r3
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dca:	601a      	str	r2, [r3, #0]
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	2000013c 	.word	0x2000013c

08000ddc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <HAL_GetTick+0x10>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	2000013c 	.word	0x2000013c

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	0002      	movs	r2, r0
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b7f      	cmp	r3, #127	; 0x7f
 8000e02:	d809      	bhi.n	8000e18 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	001a      	movs	r2, r3
 8000e0a:	231f      	movs	r3, #31
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_EnableIRQ+0x30>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	4091      	lsls	r1, r2
 8000e14:	000a      	movs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
  }
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b7f      	cmp	r3, #127	; 0x7f
 8000e38:	d828      	bhi.n	8000e8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ef8 <__NVIC_SetPriority+0xd4>)
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	33c0      	adds	r3, #192	; 0xc0
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	589b      	ldr	r3, [r3, r2]
 8000e4a:	1dfa      	adds	r2, r7, #7
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	0011      	movs	r1, r2
 8000e50:	2203      	movs	r2, #3
 8000e52:	400a      	ands	r2, r1
 8000e54:	00d2      	lsls	r2, r2, #3
 8000e56:	21ff      	movs	r1, #255	; 0xff
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	000a      	movs	r2, r1
 8000e5c:	43d2      	mvns	r2, r2
 8000e5e:	401a      	ands	r2, r3
 8000e60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	019b      	lsls	r3, r3, #6
 8000e66:	22ff      	movs	r2, #255	; 0xff
 8000e68:	401a      	ands	r2, r3
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	0018      	movs	r0, r3
 8000e70:	2303      	movs	r3, #3
 8000e72:	4003      	ands	r3, r0
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e78:	481f      	ldr	r0, [pc, #124]	; (8000ef8 <__NVIC_SetPriority+0xd4>)
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	430a      	orrs	r2, r1
 8000e84:	33c0      	adds	r3, #192	; 0xc0
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e8a:	e031      	b.n	8000ef0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <__NVIC_SetPriority+0xd8>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	0019      	movs	r1, r3
 8000e94:	230f      	movs	r3, #15
 8000e96:	400b      	ands	r3, r1
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	3306      	adds	r3, #6
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	18d3      	adds	r3, r2, r3
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1dfa      	adds	r2, r7, #7
 8000ea8:	7812      	ldrb	r2, [r2, #0]
 8000eaa:	0011      	movs	r1, r2
 8000eac:	2203      	movs	r2, #3
 8000eae:	400a      	ands	r2, r1
 8000eb0:	00d2      	lsls	r2, r2, #3
 8000eb2:	21ff      	movs	r1, #255	; 0xff
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	000a      	movs	r2, r1
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	401a      	ands	r2, r3
 8000ebc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	019b      	lsls	r3, r3, #6
 8000ec2:	22ff      	movs	r2, #255	; 0xff
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	2303      	movs	r3, #3
 8000ece:	4003      	ands	r3, r0
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <__NVIC_SetPriority+0xd8>)
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	001c      	movs	r4, r3
 8000edc:	230f      	movs	r3, #15
 8000ede:	4023      	ands	r3, r4
 8000ee0:	3b08      	subs	r3, #8
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	3306      	adds	r3, #6
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	18c3      	adds	r3, r0, r3
 8000eec:	3304      	adds	r3, #4
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b003      	add	sp, #12
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	1e5a      	subs	r2, r3, #1
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	045b      	lsls	r3, r3, #17
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d301      	bcc.n	8000f18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f14:	2301      	movs	r3, #1
 8000f16:	e010      	b.n	8000f3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <SysTick_Config+0x44>)
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	3a01      	subs	r2, #1
 8000f1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f20:	2301      	movs	r3, #1
 8000f22:	425b      	negs	r3, r3
 8000f24:	2103      	movs	r1, #3
 8000f26:	0018      	movs	r0, r3
 8000f28:	f7ff ff7c 	bl	8000e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x44>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x44>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	210f      	movs	r1, #15
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	1c02      	adds	r2, r0, #0
 8000f58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff ff5d 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b004      	add	sp, #16
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	0002      	movs	r2, r0
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff ff33 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff ffaf 	bl	8000f00 <SysTick_Config>
 8000fa2:	0003      	movs	r3, r0
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e036      	b.n	8001030 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2221      	movs	r2, #33	; 0x21
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4a18      	ldr	r2, [pc, #96]	; (8001038 <HAL_DMA_Init+0x8c>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	0018      	movs	r0, r3
 8001014:	f000 f932 	bl	800127c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2221      	movs	r2, #33	; 0x21
 8001022:	2101      	movs	r1, #1
 8001024:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2220      	movs	r2, #32
 800102a:	2100      	movs	r1, #0
 800102c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}  
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b004      	add	sp, #16
 8001036:	bd80      	pop	{r7, pc}
 8001038:	ffffc00f 	.word	0xffffc00f

0800103c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2221      	movs	r2, #33	; 0x21
 8001048:	5c9b      	ldrb	r3, [r3, r2]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d008      	beq.n	8001062 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2204      	movs	r2, #4
 8001054:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2220      	movs	r2, #32
 800105a:	2100      	movs	r1, #0
 800105c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e020      	b.n	80010a4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	210e      	movs	r1, #14
 800106e:	438a      	bics	r2, r1
 8001070:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	438a      	bics	r2, r1
 8001080:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108a:	2101      	movs	r1, #1
 800108c:	4091      	lsls	r1, r2
 800108e:	000a      	movs	r2, r1
 8001090:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2221      	movs	r2, #33	; 0x21
 8001096:	2101      	movs	r1, #1
 8001098:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2220      	movs	r2, #32
 800109e:	2100      	movs	r1, #0
 80010a0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b4:	210f      	movs	r1, #15
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2221      	movs	r2, #33	; 0x21
 80010c0:	5c9b      	ldrb	r3, [r3, r2]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d006      	beq.n	80010d6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2204      	movs	r2, #4
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e028      	b.n	8001128 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	210e      	movs	r1, #14
 80010e2:	438a      	bics	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2101      	movs	r1, #1
 80010f2:	438a      	bics	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fe:	2101      	movs	r1, #1
 8001100:	4091      	lsls	r1, r2
 8001102:	000a      	movs	r2, r1
 8001104:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2221      	movs	r2, #33	; 0x21
 800110a:	2101      	movs	r1, #1
 800110c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2220      	movs	r2, #32
 8001112:	2100      	movs	r1, #0
 8001114:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111a:	2b00      	cmp	r3, #0
 800111c:	d004      	beq.n	8001128 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	0010      	movs	r0, r2
 8001126:	4798      	blx	r3
    } 
  }
  return status;
 8001128:	230f      	movs	r3, #15
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	781b      	ldrb	r3, [r3, #0]
}
 800112e:	0018      	movs	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	2204      	movs	r2, #4
 8001154:	409a      	lsls	r2, r3
 8001156:	0013      	movs	r3, r2
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4013      	ands	r3, r2
 800115c:	d024      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x72>
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	2204      	movs	r2, #4
 8001162:	4013      	ands	r3, r2
 8001164:	d020      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2220      	movs	r2, #32
 800116e:	4013      	ands	r3, r2
 8001170:	d107      	bne.n	8001182 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2104      	movs	r1, #4
 800117e:	438a      	bics	r2, r1
 8001180:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118a:	2104      	movs	r1, #4
 800118c:	4091      	lsls	r1, r2
 800118e:	000a      	movs	r2, r1
 8001190:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	2b00      	cmp	r3, #0
 8001198:	d100      	bne.n	800119c <HAL_DMA_IRQHandler+0x66>
 800119a:	e06a      	b.n	8001272 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	0010      	movs	r0, r2
 80011a4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80011a6:	e064      	b.n	8001272 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	2202      	movs	r2, #2
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	d02b      	beq.n	8001210 <HAL_DMA_IRQHandler+0xda>
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2202      	movs	r2, #2
 80011bc:	4013      	ands	r3, r2
 80011be:	d027      	beq.n	8001210 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2220      	movs	r2, #32
 80011c8:	4013      	ands	r3, r2
 80011ca:	d10b      	bne.n	80011e4 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	210a      	movs	r1, #10
 80011d8:	438a      	bics	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2221      	movs	r2, #33	; 0x21
 80011e0:	2101      	movs	r1, #1
 80011e2:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ec:	2102      	movs	r1, #2
 80011ee:	4091      	lsls	r1, r2
 80011f0:	000a      	movs	r2, r1
 80011f2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2220      	movs	r2, #32
 80011f8:	2100      	movs	r1, #0
 80011fa:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	2b00      	cmp	r3, #0
 8001202:	d036      	beq.n	8001272 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	0010      	movs	r0, r2
 800120c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800120e:	e030      	b.n	8001272 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	2208      	movs	r2, #8
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	d028      	beq.n	8001272 <HAL_DMA_IRQHandler+0x13c>
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2208      	movs	r2, #8
 8001224:	4013      	ands	r3, r2
 8001226:	d024      	beq.n	8001272 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	210e      	movs	r1, #14
 8001234:	438a      	bics	r2, r1
 8001236:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001240:	2101      	movs	r1, #1
 8001242:	4091      	lsls	r1, r2
 8001244:	000a      	movs	r2, r1
 8001246:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2221      	movs	r2, #33	; 0x21
 8001252:	2101      	movs	r1, #1
 8001254:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2220      	movs	r2, #32
 800125a:	2100      	movs	r1, #0
 800125c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	0010      	movs	r0, r2
 800126e:	4798      	blx	r3
    }
   }
}  
 8001270:	e7ff      	b.n	8001272 <HAL_DMA_IRQHandler+0x13c>
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b004      	add	sp, #16
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <DMA_CalcBaseAndBitshift+0x30>)
 800128a:	4694      	mov	ip, r2
 800128c:	4463      	add	r3, ip
 800128e:	2114      	movs	r1, #20
 8001290:	0018      	movs	r0, r3
 8001292:	f7fe ff39 	bl	8000108 <__udivsi3>
 8001296:	0003      	movs	r3, r0
 8001298:	009a      	lsls	r2, r3, #2
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <DMA_CalcBaseAndBitshift+0x34>)
 80012a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	bffdfff8 	.word	0xbffdfff8
 80012b0:	40020000 	.word	0x40020000

080012b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c2:	e14f      	b.n	8001564 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4091      	lsls	r1, r2
 80012ce:	000a      	movs	r2, r1
 80012d0:	4013      	ands	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d100      	bne.n	80012dc <HAL_GPIO_Init+0x28>
 80012da:	e140      	b.n	800155e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2203      	movs	r2, #3
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d005      	beq.n	80012f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2203      	movs	r2, #3
 80012ee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d130      	bne.n	8001356 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	409a      	lsls	r2, r3
 8001302:	0013      	movs	r3, r2
 8001304:	43da      	mvns	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	409a      	lsls	r2, r3
 8001316:	0013      	movs	r3, r2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800132a:	2201      	movs	r2, #1
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
 8001330:	0013      	movs	r3, r2
 8001332:	43da      	mvns	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	2201      	movs	r2, #1
 8001342:	401a      	ands	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2203      	movs	r2, #3
 800135c:	4013      	ands	r3, r2
 800135e:	2b03      	cmp	r3, #3
 8001360:	d017      	beq.n	8001392 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	43da      	mvns	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	409a      	lsls	r2, r3
 8001384:	0013      	movs	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	4013      	ands	r3, r2
 800139a:	2b02      	cmp	r3, #2
 800139c:	d123      	bne.n	80013e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	08da      	lsrs	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3208      	adds	r2, #8
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	58d3      	ldr	r3, [r2, r3]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2207      	movs	r2, #7
 80013b0:	4013      	ands	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	220f      	movs	r2, #15
 80013b6:	409a      	lsls	r2, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	43da      	mvns	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2107      	movs	r1, #7
 80013ca:	400b      	ands	r3, r1
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	08da      	lsrs	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3208      	adds	r2, #8
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	6939      	ldr	r1, [r7, #16]
 80013e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	409a      	lsls	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	43da      	mvns	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2203      	movs	r2, #3
 8001404:	401a      	ands	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	23c0      	movs	r3, #192	; 0xc0
 8001420:	029b      	lsls	r3, r3, #10
 8001422:	4013      	ands	r3, r2
 8001424:	d100      	bne.n	8001428 <HAL_GPIO_Init+0x174>
 8001426:	e09a      	b.n	800155e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001428:	4b54      	ldr	r3, [pc, #336]	; (800157c <HAL_GPIO_Init+0x2c8>)
 800142a:	699a      	ldr	r2, [r3, #24]
 800142c:	4b53      	ldr	r3, [pc, #332]	; (800157c <HAL_GPIO_Init+0x2c8>)
 800142e:	2101      	movs	r1, #1
 8001430:	430a      	orrs	r2, r1
 8001432:	619a      	str	r2, [r3, #24]
 8001434:	4b51      	ldr	r3, [pc, #324]	; (800157c <HAL_GPIO_Init+0x2c8>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2201      	movs	r2, #1
 800143a:	4013      	ands	r3, r2
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001440:	4a4f      	ldr	r2, [pc, #316]	; (8001580 <HAL_GPIO_Init+0x2cc>)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	3302      	adds	r3, #2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	589b      	ldr	r3, [r3, r2]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2203      	movs	r2, #3
 8001452:	4013      	ands	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	409a      	lsls	r2, r3
 800145a:	0013      	movs	r3, r2
 800145c:	43da      	mvns	r2, r3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	2390      	movs	r3, #144	; 0x90
 8001468:	05db      	lsls	r3, r3, #23
 800146a:	429a      	cmp	r2, r3
 800146c:	d013      	beq.n	8001496 <HAL_GPIO_Init+0x1e2>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a44      	ldr	r2, [pc, #272]	; (8001584 <HAL_GPIO_Init+0x2d0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00d      	beq.n	8001492 <HAL_GPIO_Init+0x1de>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a43      	ldr	r2, [pc, #268]	; (8001588 <HAL_GPIO_Init+0x2d4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d007      	beq.n	800148e <HAL_GPIO_Init+0x1da>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a42      	ldr	r2, [pc, #264]	; (800158c <HAL_GPIO_Init+0x2d8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_GPIO_Init+0x1d6>
 8001486:	2303      	movs	r3, #3
 8001488:	e006      	b.n	8001498 <HAL_GPIO_Init+0x1e4>
 800148a:	2305      	movs	r3, #5
 800148c:	e004      	b.n	8001498 <HAL_GPIO_Init+0x1e4>
 800148e:	2302      	movs	r3, #2
 8001490:	e002      	b.n	8001498 <HAL_GPIO_Init+0x1e4>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <HAL_GPIO_Init+0x1e4>
 8001496:	2300      	movs	r3, #0
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	2103      	movs	r1, #3
 800149c:	400a      	ands	r2, r1
 800149e:	0092      	lsls	r2, r2, #2
 80014a0:	4093      	lsls	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014a8:	4935      	ldr	r1, [pc, #212]	; (8001580 <HAL_GPIO_Init+0x2cc>)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	3302      	adds	r3, #2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b6:	4b36      	ldr	r3, [pc, #216]	; (8001590 <HAL_GPIO_Init+0x2dc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43da      	mvns	r2, r3
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	025b      	lsls	r3, r3, #9
 80014ce:	4013      	ands	r3, r2
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014da:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_GPIO_Init+0x2dc>)
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014e0:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_GPIO_Init+0x2dc>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43da      	mvns	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	029b      	lsls	r3, r3, #10
 80014f8:	4013      	ands	r3, r2
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <HAL_GPIO_Init+0x2dc>)
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <HAL_GPIO_Init+0x2dc>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43da      	mvns	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	035b      	lsls	r3, r3, #13
 8001522:	4013      	ands	r3, r2
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_GPIO_Init+0x2dc>)
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_GPIO_Init+0x2dc>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	43da      	mvns	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	039b      	lsls	r3, r3, #14
 800154c:	4013      	ands	r3, r2
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_GPIO_Init+0x2dc>)
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3301      	adds	r3, #1
 8001562:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	40da      	lsrs	r2, r3
 800156c:	1e13      	subs	r3, r2, #0
 800156e:	d000      	beq.n	8001572 <HAL_GPIO_Init+0x2be>
 8001570:	e6a8      	b.n	80012c4 <HAL_GPIO_Init+0x10>
  } 
}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	b006      	add	sp, #24
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000
 8001584:	48000400 	.word	0x48000400
 8001588:	48000800 	.word	0x48000800
 800158c:	48000c00 	.word	0x48000c00
 8001590:	40010400 	.word	0x40010400

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	0008      	movs	r0, r1
 800159e:	0011      	movs	r1, r2
 80015a0:	1cbb      	adds	r3, r7, #2
 80015a2:	1c02      	adds	r2, r0, #0
 80015a4:	801a      	strh	r2, [r3, #0]
 80015a6:	1c7b      	adds	r3, r7, #1
 80015a8:	1c0a      	adds	r2, r1, #0
 80015aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ac:	1c7b      	adds	r3, r7, #1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015b4:	1cbb      	adds	r3, r7, #2
 80015b6:	881a      	ldrh	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015be:	1cbb      	adds	r3, r7, #2
 80015c0:	881a      	ldrh	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b002      	add	sp, #8
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	000a      	movs	r2, r1
 80015d8:	1cbb      	adds	r3, r7, #2
 80015da:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015e2:	1cbb      	adds	r3, r7, #2
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4013      	ands	r3, r2
 80015ea:	041a      	lsls	r2, r3, #16
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	1cb9      	adds	r1, r7, #2
 80015f2:	8809      	ldrh	r1, [r1, #0]
 80015f4:	400b      	ands	r3, r1
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
}
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b004      	add	sp, #16
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e082      	b.n	800171c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2241      	movs	r2, #65	; 0x41
 800161a:	5c9b      	ldrb	r3, [r3, r2]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d107      	bne.n	8001632 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2240      	movs	r2, #64	; 0x40
 8001626:	2100      	movs	r1, #0
 8001628:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff fa4f 	bl	8000ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2241      	movs	r2, #65	; 0x41
 8001636:	2124      	movs	r1, #36	; 0x24
 8001638:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	438a      	bics	r2, r1
 8001648:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4934      	ldr	r1, [pc, #208]	; (8001724 <HAL_I2C_Init+0x120>)
 8001654:	400a      	ands	r2, r1
 8001656:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4931      	ldr	r1, [pc, #196]	; (8001728 <HAL_I2C_Init+0x124>)
 8001664:	400a      	ands	r2, r1
 8001666:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d108      	bne.n	8001682 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	0209      	lsls	r1, r1, #8
 800167c:	430a      	orrs	r2, r1
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	e007      	b.n	8001692 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2184      	movs	r1, #132	; 0x84
 800168c:	0209      	lsls	r1, r1, #8
 800168e:	430a      	orrs	r2, r1
 8001690:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d104      	bne.n	80016a4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	491f      	ldr	r1, [pc, #124]	; (800172c <HAL_I2C_Init+0x128>)
 80016b0:	430a      	orrs	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	491a      	ldr	r1, [pc, #104]	; (8001728 <HAL_I2C_Init+0x124>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69d9      	ldr	r1, [r3, #28]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1a      	ldr	r2, [r3, #32]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2241      	movs	r2, #65	; 0x41
 8001708:	2120      	movs	r1, #32
 800170a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2242      	movs	r2, #66	; 0x42
 8001716:	2100      	movs	r1, #0
 8001718:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}
 8001724:	f0ffffff 	.word	0xf0ffffff
 8001728:	ffff7fff 	.word	0xffff7fff
 800172c:	02008000 	.word	0x02008000

08001730 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2241      	movs	r2, #65	; 0x41
 800173e:	5c9b      	ldrb	r3, [r3, r2]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b20      	cmp	r3, #32
 8001744:	d138      	bne.n	80017b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2240      	movs	r2, #64	; 0x40
 800174a:	5c9b      	ldrb	r3, [r3, r2]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001750:	2302      	movs	r3, #2
 8001752:	e032      	b.n	80017ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2240      	movs	r2, #64	; 0x40
 8001758:	2101      	movs	r1, #1
 800175a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2241      	movs	r2, #65	; 0x41
 8001760:	2124      	movs	r1, #36	; 0x24
 8001762:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2101      	movs	r1, #1
 8001770:	438a      	bics	r2, r1
 8001772:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4911      	ldr	r1, [pc, #68]	; (80017c4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001780:	400a      	ands	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2101      	movs	r1, #1
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2241      	movs	r2, #65	; 0x41
 80017a8:	2120      	movs	r1, #32
 80017aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2240      	movs	r2, #64	; 0x40
 80017b0:	2100      	movs	r1, #0
 80017b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	e000      	b.n	80017ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017b8:	2302      	movs	r3, #2
  }
}
 80017ba:	0018      	movs	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	b002      	add	sp, #8
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	ffffefff 	.word	0xffffefff

080017c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2241      	movs	r2, #65	; 0x41
 80017d6:	5c9b      	ldrb	r3, [r3, r2]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b20      	cmp	r3, #32
 80017dc:	d139      	bne.n	8001852 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2240      	movs	r2, #64	; 0x40
 80017e2:	5c9b      	ldrb	r3, [r3, r2]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e033      	b.n	8001854 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2240      	movs	r2, #64	; 0x40
 80017f0:	2101      	movs	r1, #1
 80017f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2241      	movs	r2, #65	; 0x41
 80017f8:	2124      	movs	r1, #36	; 0x24
 80017fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2101      	movs	r1, #1
 8001808:	438a      	bics	r2, r1
 800180a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4a11      	ldr	r2, [pc, #68]	; (800185c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2101      	movs	r1, #1
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2241      	movs	r2, #65	; 0x41
 8001842:	2120      	movs	r1, #32
 8001844:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2240      	movs	r2, #64	; 0x40
 800184a:	2100      	movs	r1, #0
 800184c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e000      	b.n	8001854 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001852:	2302      	movs	r3, #2
  }
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}
 800185c:	fffff0ff 	.word	0xfffff0ff

08001860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e301      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2201      	movs	r2, #1
 8001878:	4013      	ands	r3, r2
 800187a:	d100      	bne.n	800187e <HAL_RCC_OscConfig+0x1e>
 800187c:	e08d      	b.n	800199a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800187e:	4bc3      	ldr	r3, [pc, #780]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	220c      	movs	r2, #12
 8001884:	4013      	ands	r3, r2
 8001886:	2b04      	cmp	r3, #4
 8001888:	d00e      	beq.n	80018a8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800188a:	4bc0      	ldr	r3, [pc, #768]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	220c      	movs	r2, #12
 8001890:	4013      	ands	r3, r2
 8001892:	2b08      	cmp	r3, #8
 8001894:	d116      	bne.n	80018c4 <HAL_RCC_OscConfig+0x64>
 8001896:	4bbd      	ldr	r3, [pc, #756]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	025b      	lsls	r3, r3, #9
 800189e:	401a      	ands	r2, r3
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	025b      	lsls	r3, r3, #9
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d10d      	bne.n	80018c4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	4bb8      	ldr	r3, [pc, #736]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	029b      	lsls	r3, r3, #10
 80018b0:	4013      	ands	r3, r2
 80018b2:	d100      	bne.n	80018b6 <HAL_RCC_OscConfig+0x56>
 80018b4:	e070      	b.n	8001998 <HAL_RCC_OscConfig+0x138>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d000      	beq.n	80018c0 <HAL_RCC_OscConfig+0x60>
 80018be:	e06b      	b.n	8001998 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e2d8      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_OscConfig+0x7c>
 80018cc:	4baf      	ldr	r3, [pc, #700]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4bae      	ldr	r3, [pc, #696]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018d2:	2180      	movs	r1, #128	; 0x80
 80018d4:	0249      	lsls	r1, r1, #9
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e02f      	b.n	800193c <HAL_RCC_OscConfig+0xdc>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10c      	bne.n	80018fe <HAL_RCC_OscConfig+0x9e>
 80018e4:	4ba9      	ldr	r3, [pc, #676]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4ba8      	ldr	r3, [pc, #672]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018ea:	49a9      	ldr	r1, [pc, #676]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	4ba6      	ldr	r3, [pc, #664]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4ba5      	ldr	r3, [pc, #660]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80018f6:	49a7      	ldr	r1, [pc, #668]	; (8001b94 <HAL_RCC_OscConfig+0x334>)
 80018f8:	400a      	ands	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e01e      	b.n	800193c <HAL_RCC_OscConfig+0xdc>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b05      	cmp	r3, #5
 8001904:	d10e      	bne.n	8001924 <HAL_RCC_OscConfig+0xc4>
 8001906:	4ba1      	ldr	r3, [pc, #644]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4ba0      	ldr	r3, [pc, #640]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	02c9      	lsls	r1, r1, #11
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	4b9d      	ldr	r3, [pc, #628]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b9c      	ldr	r3, [pc, #624]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	0249      	lsls	r1, r1, #9
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0xdc>
 8001924:	4b99      	ldr	r3, [pc, #612]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b98      	ldr	r3, [pc, #608]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 800192a:	4999      	ldr	r1, [pc, #612]	; (8001b90 <HAL_RCC_OscConfig+0x330>)
 800192c:	400a      	ands	r2, r1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	4b96      	ldr	r3, [pc, #600]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b95      	ldr	r3, [pc, #596]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001936:	4997      	ldr	r1, [pc, #604]	; (8001b94 <HAL_RCC_OscConfig+0x334>)
 8001938:	400a      	ands	r2, r1
 800193a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d014      	beq.n	800196e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fa4a 	bl	8000ddc <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194e:	f7ff fa45 	bl	8000ddc <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b64      	cmp	r3, #100	; 0x64
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e28a      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001960:	4b8a      	ldr	r3, [pc, #552]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	029b      	lsls	r3, r3, #10
 8001968:	4013      	ands	r3, r2
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0xee>
 800196c:	e015      	b.n	800199a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff fa35 	bl	8000ddc <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fa30 	bl	8000ddc <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e275      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	4b80      	ldr	r3, [pc, #512]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	029b      	lsls	r3, r3, #10
 8001992:	4013      	ands	r3, r2
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x118>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2202      	movs	r2, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d100      	bne.n	80019a6 <HAL_RCC_OscConfig+0x146>
 80019a4:	e069      	b.n	8001a7a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019a6:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	220c      	movs	r2, #12
 80019ac:	4013      	ands	r3, r2
 80019ae:	d00b      	beq.n	80019c8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019b0:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	220c      	movs	r2, #12
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d11c      	bne.n	80019f6 <HAL_RCC_OscConfig+0x196>
 80019bc:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	025b      	lsls	r3, r3, #9
 80019c4:	4013      	ands	r3, r2
 80019c6:	d116      	bne.n	80019f6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c8:	4b70      	ldr	r3, [pc, #448]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2202      	movs	r2, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x17e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e24b      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	4b6b      	ldr	r3, [pc, #428]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	22f8      	movs	r2, #248	; 0xf8
 80019e4:	4393      	bics	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	00da      	lsls	r2, r3, #3
 80019ee:	4b67      	ldr	r3, [pc, #412]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f4:	e041      	b.n	8001a7a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d024      	beq.n	8001a48 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019fe:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b62      	ldr	r3, [pc, #392]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a04:	2101      	movs	r1, #1
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f9e7 	bl	8000ddc <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff f9e2 	bl	8000ddc <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e227      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d0f1      	beq.n	8001a14 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b56      	ldr	r3, [pc, #344]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	22f8      	movs	r2, #248	; 0xf8
 8001a36:	4393      	bics	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00da      	lsls	r2, r3, #3
 8001a40:	4b52      	ldr	r3, [pc, #328]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e018      	b.n	8001a7a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a48:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	2101      	movs	r1, #1
 8001a50:	438a      	bics	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff f9c2 	bl	8000ddc <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a5e:	f7ff f9bd 	bl	8000ddc <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e202      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a70:	4b46      	ldr	r3, [pc, #280]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2202      	movs	r2, #2
 8001a76:	4013      	ands	r3, r2
 8001a78:	d1f1      	bne.n	8001a5e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2208      	movs	r2, #8
 8001a80:	4013      	ands	r3, r2
 8001a82:	d036      	beq.n	8001af2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d019      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8c:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a90:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	430a      	orrs	r2, r1
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7ff f9a0 	bl	8000ddc <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f99b 	bl	8000ddc <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e1e0      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab4:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	2202      	movs	r2, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	d0f1      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x242>
 8001abe:	e018      	b.n	8001af2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ac4:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	438a      	bics	r2, r1
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7ff f986 	bl	8000ddc <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad6:	f7ff f981 	bl	8000ddc <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e1c6      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	2202      	movs	r2, #2
 8001aee:	4013      	ands	r3, r2
 8001af0:	d1f1      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2204      	movs	r2, #4
 8001af8:	4013      	ands	r3, r2
 8001afa:	d100      	bne.n	8001afe <HAL_RCC_OscConfig+0x29e>
 8001afc:	e0b4      	b.n	8001c68 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	201f      	movs	r0, #31
 8001b00:	183b      	adds	r3, r7, r0
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	055b      	lsls	r3, r3, #21
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d110      	bne.n	8001b34 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0549      	lsls	r1, r1, #21
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	61da      	str	r2, [r3, #28]
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001b22:	69da      	ldr	r2, [r3, #28]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	055b      	lsls	r3, r3, #21
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b2e:	183b      	adds	r3, r7, r0
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_RCC_OscConfig+0x338>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d11a      	bne.n	8001b76 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_RCC_OscConfig+0x338>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_RCC_OscConfig+0x338>)
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	0049      	lsls	r1, r1, #1
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff f945 	bl	8000ddc <HAL_GetTick>
 8001b52:	0003      	movs	r3, r0
 8001b54:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b58:	f7ff f940 	bl	8000ddc <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e185      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_OscConfig+0x338>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4013      	ands	r3, r2
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d10e      	bne.n	8001b9c <HAL_RCC_OscConfig+0x33c>
 8001b7e:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001b80:	6a1a      	ldr	r2, [r3, #32]
 8001b82:	4b02      	ldr	r3, [pc, #8]	; (8001b8c <HAL_RCC_OscConfig+0x32c>)
 8001b84:	2101      	movs	r1, #1
 8001b86:	430a      	orrs	r2, r1
 8001b88:	621a      	str	r2, [r3, #32]
 8001b8a:	e035      	b.n	8001bf8 <HAL_RCC_OscConfig+0x398>
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	fffeffff 	.word	0xfffeffff
 8001b94:	fffbffff 	.word	0xfffbffff
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10c      	bne.n	8001bbe <HAL_RCC_OscConfig+0x35e>
 8001ba4:	4bb6      	ldr	r3, [pc, #728]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001ba6:	6a1a      	ldr	r2, [r3, #32]
 8001ba8:	4bb5      	ldr	r3, [pc, #724]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	438a      	bics	r2, r1
 8001bae:	621a      	str	r2, [r3, #32]
 8001bb0:	4bb3      	ldr	r3, [pc, #716]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	4bb2      	ldr	r3, [pc, #712]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	438a      	bics	r2, r1
 8001bba:	621a      	str	r2, [r3, #32]
 8001bbc:	e01c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x398>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x380>
 8001bc6:	4bae      	ldr	r3, [pc, #696]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bc8:	6a1a      	ldr	r2, [r3, #32]
 8001bca:	4bad      	ldr	r3, [pc, #692]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bcc:	2104      	movs	r1, #4
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	621a      	str	r2, [r3, #32]
 8001bd2:	4bab      	ldr	r3, [pc, #684]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bd4:	6a1a      	ldr	r2, [r3, #32]
 8001bd6:	4baa      	ldr	r3, [pc, #680]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bd8:	2101      	movs	r1, #1
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	621a      	str	r2, [r3, #32]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x398>
 8001be0:	4ba7      	ldr	r3, [pc, #668]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001be2:	6a1a      	ldr	r2, [r3, #32]
 8001be4:	4ba6      	ldr	r3, [pc, #664]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	438a      	bics	r2, r1
 8001bea:	621a      	str	r2, [r3, #32]
 8001bec:	4ba4      	ldr	r3, [pc, #656]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bee:	6a1a      	ldr	r2, [r3, #32]
 8001bf0:	4ba3      	ldr	r3, [pc, #652]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d014      	beq.n	8001c2a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c00:	f7ff f8ec 	bl	8000ddc <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	e009      	b.n	8001c1e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff f8e7 	bl	8000ddc <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4a9b      	ldr	r2, [pc, #620]	; (8001e84 <HAL_RCC_OscConfig+0x624>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e12b      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1e:	4b98      	ldr	r3, [pc, #608]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x3aa>
 8001c28:	e013      	b.n	8001c52 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f8d7 	bl	8000ddc <HAL_GetTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c32:	e009      	b.n	8001c48 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7ff f8d2 	bl	8000ddc <HAL_GetTick>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	4a91      	ldr	r2, [pc, #580]	; (8001e84 <HAL_RCC_OscConfig+0x624>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e116      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c48:	4b8d      	ldr	r3, [pc, #564]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c52:	231f      	movs	r3, #31
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5c:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	4b87      	ldr	r3, [pc, #540]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c62:	4989      	ldr	r1, [pc, #548]	; (8001e88 <HAL_RCC_OscConfig+0x628>)
 8001c64:	400a      	ands	r2, r1
 8001c66:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d063      	beq.n	8001d3a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d12a      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c7a:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c7e:	4b80      	ldr	r3, [pc, #512]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c80:	2104      	movs	r1, #4
 8001c82:	430a      	orrs	r2, r1
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c86:	4b7e      	ldr	r3, [pc, #504]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8a:	4b7d      	ldr	r3, [pc, #500]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c92:	f7ff f8a3 	bl	8000ddc <HAL_GetTick>
 8001c96:	0003      	movs	r3, r0
 8001c98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c9c:	f7ff f89e 	bl	8000ddc <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0e3      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001cae:	4b74      	ldr	r3, [pc, #464]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d0f1      	beq.n	8001c9c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001cb8:	4b71      	ldr	r3, [pc, #452]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbc:	22f8      	movs	r2, #248	; 0xf8
 8001cbe:	4393      	bics	r3, r2
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	00da      	lsls	r2, r3, #3
 8001cc8:	4b6d      	ldr	r3, [pc, #436]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cce:	e034      	b.n	8001d3a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	3305      	adds	r3, #5
 8001cd6:	d111      	bne.n	8001cfc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001cd8:	4b69      	ldr	r3, [pc, #420]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cdc:	4b68      	ldr	r3, [pc, #416]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cde:	2104      	movs	r1, #4
 8001ce0:	438a      	bics	r2, r1
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ce4:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce8:	22f8      	movs	r2, #248	; 0xf8
 8001cea:	4393      	bics	r3, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	00da      	lsls	r2, r3, #3
 8001cf4:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cfa:	e01e      	b.n	8001d3a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cfc:	4b60      	ldr	r3, [pc, #384]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d00:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d02:	2104      	movs	r1, #4
 8001d04:	430a      	orrs	r2, r1
 8001d06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d08:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d0c:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d0e:	2101      	movs	r1, #1
 8001d10:	438a      	bics	r2, r1
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d14:	f7ff f862 	bl	8000ddc <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d1e:	f7ff f85d 	bl	8000ddc <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0a2      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	2202      	movs	r2, #2
 8001d36:	4013      	ands	r3, r2
 8001d38:	d1f1      	bne.n	8001d1e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d100      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4e4>
 8001d42:	e097      	b.n	8001e74 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d44:	4b4e      	ldr	r3, [pc, #312]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	220c      	movs	r2, #12
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d100      	bne.n	8001d52 <HAL_RCC_OscConfig+0x4f2>
 8001d50:	e06b      	b.n	8001e2a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d14c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b48      	ldr	r3, [pc, #288]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d60:	494a      	ldr	r1, [pc, #296]	; (8001e8c <HAL_RCC_OscConfig+0x62c>)
 8001d62:	400a      	ands	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff f839 	bl	8000ddc <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff f834 	bl	8000ddc <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e079      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	049b      	lsls	r3, r3, #18
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d8e:	4b3c      	ldr	r3, [pc, #240]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	220f      	movs	r2, #15
 8001d94:	4393      	bics	r3, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9c:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4a3a      	ldr	r2, [pc, #232]	; (8001e90 <HAL_RCC_OscConfig+0x630>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	431a      	orrs	r2, r3
 8001db6:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001dc2:	2180      	movs	r1, #128	; 0x80
 8001dc4:	0449      	lsls	r1, r1, #17
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7ff f807 	bl	8000ddc <HAL_GetTick>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7ff f802 	bl	8000ddc <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e047      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	049b      	lsls	r3, r3, #18
 8001dee:	4013      	ands	r3, r2
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x574>
 8001df2:	e03f      	b.n	8001e74 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df4:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001dfa:	4924      	ldr	r1, [pc, #144]	; (8001e8c <HAL_RCC_OscConfig+0x62c>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7fe ffec 	bl	8000ddc <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7fe ffe7 	bl	8000ddc <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e02c      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	049b      	lsls	r3, r3, #18
 8001e24:	4013      	ands	r3, r2
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x5aa>
 8001e28:	e024      	b.n	8001e74 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e01f      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_RCC_OscConfig+0x620>)
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	025b      	lsls	r3, r3, #9
 8001e48:	401a      	ands	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d10e      	bne.n	8001e70 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	220f      	movs	r2, #15
 8001e56:	401a      	ands	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	23f0      	movs	r3, #240	; 0xf0
 8001e64:	039b      	lsls	r3, r3, #14
 8001e66:	401a      	ands	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b008      	add	sp, #32
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	40021000 	.word	0x40021000
 8001e84:	00001388 	.word	0x00001388
 8001e88:	efffffff 	.word	0xefffffff
 8001e8c:	feffffff 	.word	0xfeffffff
 8001e90:	ffc2ffff 	.word	0xffc2ffff

08001e94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0b3      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b5b      	ldr	r3, [pc, #364]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2201      	movs	r2, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d911      	bls.n	8001eda <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b58      	ldr	r3, [pc, #352]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4393      	bics	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	4b55      	ldr	r3, [pc, #340]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec8:	4b53      	ldr	r3, [pc, #332]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	4013      	ands	r3, r2
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e09a      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d015      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2204      	movs	r2, #4
 8001eea:	4013      	ands	r3, r2
 8001eec:	d006      	beq.n	8001efc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001eee:	4b4b      	ldr	r3, [pc, #300]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	4b4a      	ldr	r3, [pc, #296]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001ef4:	21e0      	movs	r1, #224	; 0xe0
 8001ef6:	00c9      	lsls	r1, r1, #3
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	22f0      	movs	r2, #240	; 0xf0
 8001f02:	4393      	bics	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	4b44      	ldr	r3, [pc, #272]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2201      	movs	r2, #1
 8001f16:	4013      	ands	r3, r2
 8001f18:	d040      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b3e      	ldr	r3, [pc, #248]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	029b      	lsls	r3, r3, #10
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d114      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e06e      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	049b      	lsls	r3, r3, #18
 8001f42:	4013      	ands	r3, r2
 8001f44:	d108      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e062      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	4b34      	ldr	r3, [pc, #208]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	4013      	ands	r3, r2
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e05b      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f58:	4b30      	ldr	r3, [pc, #192]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	4393      	bics	r3, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7fe ff36 	bl	8000ddc <HAL_GetTick>
 8001f70:	0003      	movs	r3, r0
 8001f72:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f74:	e009      	b.n	8001f8a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f76:	f7fe ff31 	bl	8000ddc <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	4a27      	ldr	r2, [pc, #156]	; (8002020 <HAL_RCC_ClockConfig+0x18c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e042      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	220c      	movs	r2, #12
 8001f90:	401a      	ands	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1ec      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d211      	bcs.n	8001fce <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	4b18      	ldr	r3, [pc, #96]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <HAL_RCC_ClockConfig+0x184>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e020      	b.n	8002010 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d009      	beq.n	8001fec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a11      	ldr	r2, [pc, #68]	; (8002024 <HAL_RCC_ClockConfig+0x190>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fec:	f000 f820 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8001ff0:	0001      	movs	r1, r0
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_RCC_ClockConfig+0x188>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_RCC_ClockConfig+0x194>)
 8001ffe:	5cd3      	ldrb	r3, [r2, r3]
 8002000:	000a      	movs	r2, r1
 8002002:	40da      	lsrs	r2, r3
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x198>)
 8002006:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002008:	2000      	movs	r0, #0
 800200a:	f7fe fea1 	bl	8000d50 <HAL_InitTick>
  
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b004      	add	sp, #16
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40022000 	.word	0x40022000
 800201c:	40021000 	.word	0x40021000
 8002020:	00001388 	.word	0x00001388
 8002024:	fffff8ff 	.word	0xfffff8ff
 8002028:	080031ac 	.word	0x080031ac
 800202c:	20000000 	.word	0x20000000

08002030 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b08f      	sub	sp, #60	; 0x3c
 8002034:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002036:	2314      	movs	r3, #20
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	4a2b      	ldr	r2, [pc, #172]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800203c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800203e:	c313      	stmia	r3!, {r0, r1, r4}
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	4a29      	ldr	r2, [pc, #164]	; (80020ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002048:	ca13      	ldmia	r2!, {r0, r1, r4}
 800204a:	c313      	stmia	r3!, {r0, r1, r4}
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002054:	2300      	movs	r3, #0
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
 8002058:	2300      	movs	r3, #0
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
 800205c:	2300      	movs	r3, #0
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002064:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800206a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206c:	220c      	movs	r2, #12
 800206e:	4013      	ands	r3, r2
 8002070:	2b04      	cmp	r3, #4
 8002072:	d002      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x4a>
 8002074:	2b08      	cmp	r3, #8
 8002076:	d003      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x50>
 8002078:	e02d      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800207e:	e02d      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002082:	0c9b      	lsrs	r3, r3, #18
 8002084:	220f      	movs	r2, #15
 8002086:	4013      	ands	r3, r2
 8002088:	2214      	movs	r2, #20
 800208a:	18ba      	adds	r2, r7, r2
 800208c:	5cd3      	ldrb	r3, [r2, r3]
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	220f      	movs	r2, #15
 8002096:	4013      	ands	r3, r2
 8002098:	1d3a      	adds	r2, r7, #4
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800209e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	025b      	lsls	r3, r3, #9
 80020a4:	4013      	ands	r3, r2
 80020a6:	d009      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020aa:	4812      	ldr	r0, [pc, #72]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020ac:	f7fe f82c 	bl	8000108 <__udivsi3>
 80020b0:	0003      	movs	r3, r0
 80020b2:	001a      	movs	r2, r3
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	4353      	muls	r3, r2
 80020b8:	637b      	str	r3, [r7, #52]	; 0x34
 80020ba:	e009      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020be:	000a      	movs	r2, r1
 80020c0:	0152      	lsls	r2, r2, #5
 80020c2:	1a52      	subs	r2, r2, r1
 80020c4:	0193      	lsls	r3, r2, #6
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	185b      	adds	r3, r3, r1
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80020d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020d4:	e002      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b00f      	add	sp, #60	; 0x3c
 80020e4:	bd90      	pop	{r4, r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	0800314c 	.word	0x0800314c
 80020ec:	0800315c 	.word	0x0800315c
 80020f0:	40021000 	.word	0x40021000
 80020f4:	007a1200 	.word	0x007a1200

080020f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020fc:	4b02      	ldr	r3, [pc, #8]	; (8002108 <HAL_RCC_GetHCLKFreq+0x10>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	20000000 	.word	0x20000000

0800210c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002110:	f7ff fff2 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 8002114:	0001      	movs	r1, r0
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	2207      	movs	r2, #7
 800211e:	4013      	ands	r3, r2
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	40d9      	lsrs	r1, r3
 8002126:	000b      	movs	r3, r1
}    
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	40021000 	.word	0x40021000
 8002134:	080031bc 	.word	0x080031bc

08002138 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	025b      	lsls	r3, r3, #9
 8002150:	4013      	ands	r3, r2
 8002152:	d100      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002154:	e08e      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002156:	2017      	movs	r0, #23
 8002158:	183b      	adds	r3, r7, r0
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215e:	4b5f      	ldr	r3, [pc, #380]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	055b      	lsls	r3, r3, #21
 8002166:	4013      	ands	r3, r2
 8002168:	d110      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b5c      	ldr	r3, [pc, #368]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	4b5b      	ldr	r3, [pc, #364]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	0549      	lsls	r1, r1, #21
 8002174:	430a      	orrs	r2, r1
 8002176:	61da      	str	r2, [r3, #28]
 8002178:	4b58      	ldr	r3, [pc, #352]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	055b      	lsls	r3, r3, #21
 8002180:	4013      	ands	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002186:	183b      	adds	r3, r7, r0
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	4b54      	ldr	r3, [pc, #336]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4013      	ands	r3, r2
 8002196:	d11a      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002198:	4b51      	ldr	r3, [pc, #324]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b50      	ldr	r3, [pc, #320]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	0049      	lsls	r1, r1, #1
 80021a2:	430a      	orrs	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a6:	f7fe fe19 	bl	8000ddc <HAL_GetTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ae:	e008      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b0:	f7fe fe14 	bl	8000ddc <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e087      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021ce:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021d0:	6a1a      	ldr	r2, [r3, #32]
 80021d2:	23c0      	movs	r3, #192	; 0xc0
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4013      	ands	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d034      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	23c0      	movs	r3, #192	; 0xc0
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4013      	ands	r3, r2
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d02c      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f0:	4b3a      	ldr	r3, [pc, #232]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4a3b      	ldr	r2, [pc, #236]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021fa:	4b38      	ldr	r3, [pc, #224]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021fc:	6a1a      	ldr	r2, [r3, #32]
 80021fe:	4b37      	ldr	r3, [pc, #220]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	0249      	lsls	r1, r1, #9
 8002204:	430a      	orrs	r2, r1
 8002206:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002208:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800220a:	6a1a      	ldr	r2, [r3, #32]
 800220c:	4b33      	ldr	r3, [pc, #204]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800220e:	4936      	ldr	r1, [pc, #216]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002210:	400a      	ands	r2, r1
 8002212:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002214:	4b31      	ldr	r3, [pc, #196]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	4013      	ands	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe fddb 	bl	8000ddc <HAL_GetTick>
 8002226:	0003      	movs	r3, r0
 8002228:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222a:	e009      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222c:	f7fe fdd6 	bl	8000ddc <HAL_GetTick>
 8002230:	0002      	movs	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	4a2d      	ldr	r2, [pc, #180]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e048      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002240:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	2202      	movs	r2, #2
 8002246:	4013      	ands	r3, r2
 8002248:	d0f0      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a25      	ldr	r2, [pc, #148]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002250:	4013      	ands	r3, r2
 8002252:	0019      	movs	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800225a:	430a      	orrs	r2, r1
 800225c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800225e:	2317      	movs	r3, #23
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800226e:	4920      	ldr	r1, [pc, #128]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002270:	400a      	ands	r2, r1
 8002272:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2201      	movs	r2, #1
 800227a:	4013      	ands	r3, r2
 800227c:	d009      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	2203      	movs	r2, #3
 8002284:	4393      	bics	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800228e:	430a      	orrs	r2, r1
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2220      	movs	r2, #32
 8002298:	4013      	ands	r3, r2
 800229a:	d009      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	2210      	movs	r2, #16
 80022a2:	4393      	bics	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022ac:	430a      	orrs	r2, r1
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4013      	ands	r3, r2
 80022ba:	d009      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	2240      	movs	r2, #64	; 0x40
 80022c2:	4393      	bics	r3, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80022cc:	430a      	orrs	r2, r1
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b006      	add	sp, #24
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40007000 	.word	0x40007000
 80022e4:	fffffcff 	.word	0xfffffcff
 80022e8:	fffeffff 	.word	0xfffeffff
 80022ec:	00001388 	.word	0x00001388
 80022f0:	efffffff 	.word	0xefffffff

080022f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e044      	b.n	8002390 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800230a:	2b00      	cmp	r3, #0
 800230c:	d107      	bne.n	800231e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2274      	movs	r2, #116	; 0x74
 8002312:	2100      	movs	r1, #0
 8002314:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	0018      	movs	r0, r3
 800231a:	f7fe fc27 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2224      	movs	r2, #36	; 0x24
 8002322:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2101      	movs	r1, #1
 8002330:	438a      	bics	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	0018      	movs	r0, r3
 8002338:	f000 fb24 	bl	8002984 <UART_SetConfig>
 800233c:	0003      	movs	r3, r0
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e024      	b.n	8002390 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	0018      	movs	r0, r3
 8002352:	f000 fc57 	bl	8002c04 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	490d      	ldr	r1, [pc, #52]	; (8002398 <HAL_UART_Init+0xa4>)
 8002362:	400a      	ands	r2, r1
 8002364:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	212a      	movs	r1, #42	; 0x2a
 8002372:	438a      	bics	r2, r1
 8002374:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2101      	movs	r1, #1
 8002382:	430a      	orrs	r2, r1
 8002384:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0018      	movs	r0, r3
 800238a:	f000 fcef 	bl	8002d6c <UART_CheckIdleState>
 800238e:	0003      	movs	r3, r0
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}
 8002398:	ffffb7ff 	.word	0xffffb7ff

0800239c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b0ab      	sub	sp, #172	; 0xac
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	22a4      	movs	r2, #164	; 0xa4
 80023ac:	18b9      	adds	r1, r7, r2
 80023ae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	20a0      	movs	r0, #160	; 0xa0
 80023b8:	1839      	adds	r1, r7, r0
 80023ba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	219c      	movs	r1, #156	; 0x9c
 80023c4:	1879      	adds	r1, r7, r1
 80023c6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023c8:	0011      	movs	r1, r2
 80023ca:	18bb      	adds	r3, r7, r2
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a99      	ldr	r2, [pc, #612]	; (8002634 <HAL_UART_IRQHandler+0x298>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	2298      	movs	r2, #152	; 0x98
 80023d4:	18bc      	adds	r4, r7, r2
 80023d6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80023d8:	18bb      	adds	r3, r7, r2
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d114      	bne.n	800240a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2220      	movs	r2, #32
 80023e6:	4013      	ands	r3, r2
 80023e8:	d00f      	beq.n	800240a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80023ea:	183b      	adds	r3, r7, r0
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2220      	movs	r2, #32
 80023f0:	4013      	ands	r3, r2
 80023f2:	d00a      	beq.n	800240a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d100      	bne.n	80023fe <HAL_UART_IRQHandler+0x62>
 80023fc:	e296      	b.n	800292c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	0010      	movs	r0, r2
 8002406:	4798      	blx	r3
      }
      return;
 8002408:	e290      	b.n	800292c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800240a:	2398      	movs	r3, #152	; 0x98
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d100      	bne.n	8002416 <HAL_UART_IRQHandler+0x7a>
 8002414:	e114      	b.n	8002640 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002416:	239c      	movs	r3, #156	; 0x9c
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	4013      	ands	r3, r2
 8002420:	d106      	bne.n	8002430 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002422:	23a0      	movs	r3, #160	; 0xa0
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a83      	ldr	r2, [pc, #524]	; (8002638 <HAL_UART_IRQHandler+0x29c>)
 800242a:	4013      	ands	r3, r2
 800242c:	d100      	bne.n	8002430 <HAL_UART_IRQHandler+0x94>
 800242e:	e107      	b.n	8002640 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002430:	23a4      	movs	r3, #164	; 0xa4
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2201      	movs	r2, #1
 8002438:	4013      	ands	r3, r2
 800243a:	d012      	beq.n	8002462 <HAL_UART_IRQHandler+0xc6>
 800243c:	23a0      	movs	r3, #160	; 0xa0
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4013      	ands	r3, r2
 8002448:	d00b      	beq.n	8002462 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2201      	movs	r2, #1
 8002450:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2280      	movs	r2, #128	; 0x80
 8002456:	589b      	ldr	r3, [r3, r2]
 8002458:	2201      	movs	r2, #1
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002462:	23a4      	movs	r3, #164	; 0xa4
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2202      	movs	r2, #2
 800246a:	4013      	ands	r3, r2
 800246c:	d011      	beq.n	8002492 <HAL_UART_IRQHandler+0xf6>
 800246e:	239c      	movs	r3, #156	; 0x9c
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2201      	movs	r2, #1
 8002476:	4013      	ands	r3, r2
 8002478:	d00b      	beq.n	8002492 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2202      	movs	r2, #2
 8002480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	589b      	ldr	r3, [r3, r2]
 8002488:	2204      	movs	r2, #4
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2180      	movs	r1, #128	; 0x80
 8002490:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002492:	23a4      	movs	r3, #164	; 0xa4
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2204      	movs	r2, #4
 800249a:	4013      	ands	r3, r2
 800249c:	d011      	beq.n	80024c2 <HAL_UART_IRQHandler+0x126>
 800249e:	239c      	movs	r3, #156	; 0x9c
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2201      	movs	r2, #1
 80024a6:	4013      	ands	r3, r2
 80024a8:	d00b      	beq.n	80024c2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2204      	movs	r2, #4
 80024b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2280      	movs	r2, #128	; 0x80
 80024b6:	589b      	ldr	r3, [r3, r2]
 80024b8:	2202      	movs	r2, #2
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024c2:	23a4      	movs	r3, #164	; 0xa4
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2208      	movs	r2, #8
 80024ca:	4013      	ands	r3, r2
 80024cc:	d017      	beq.n	80024fe <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80024ce:	23a0      	movs	r3, #160	; 0xa0
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2220      	movs	r2, #32
 80024d6:	4013      	ands	r3, r2
 80024d8:	d105      	bne.n	80024e6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80024da:	239c      	movs	r3, #156	; 0x9c
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80024e4:	d00b      	beq.n	80024fe <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2208      	movs	r2, #8
 80024ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2280      	movs	r2, #128	; 0x80
 80024f2:	589b      	ldr	r3, [r3, r2]
 80024f4:	2208      	movs	r2, #8
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2180      	movs	r1, #128	; 0x80
 80024fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80024fe:	23a4      	movs	r3, #164	; 0xa4
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	4013      	ands	r3, r2
 800250a:	d013      	beq.n	8002534 <HAL_UART_IRQHandler+0x198>
 800250c:	23a0      	movs	r3, #160	; 0xa0
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	04db      	lsls	r3, r3, #19
 8002516:	4013      	ands	r3, r2
 8002518:	d00c      	beq.n	8002534 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2280      	movs	r2, #128	; 0x80
 8002520:	0112      	lsls	r2, r2, #4
 8002522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	589b      	ldr	r3, [r3, r2]
 800252a:	2220      	movs	r2, #32
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	589b      	ldr	r3, [r3, r2]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d100      	bne.n	8002540 <HAL_UART_IRQHandler+0x1a4>
 800253e:	e1f7      	b.n	8002930 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002540:	23a4      	movs	r3, #164	; 0xa4
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2220      	movs	r2, #32
 8002548:	4013      	ands	r3, r2
 800254a:	d00e      	beq.n	800256a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800254c:	23a0      	movs	r3, #160	; 0xa0
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2220      	movs	r2, #32
 8002554:	4013      	ands	r3, r2
 8002556:	d008      	beq.n	800256a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	0010      	movs	r0, r2
 8002568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	589b      	ldr	r3, [r3, r2]
 8002570:	2194      	movs	r1, #148	; 0x94
 8002572:	187a      	adds	r2, r7, r1
 8002574:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2240      	movs	r2, #64	; 0x40
 800257e:	4013      	ands	r3, r2
 8002580:	2b40      	cmp	r3, #64	; 0x40
 8002582:	d004      	beq.n	800258e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002584:	187b      	adds	r3, r7, r1
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2228      	movs	r2, #40	; 0x28
 800258a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800258c:	d047      	beq.n	800261e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	0018      	movs	r0, r3
 8002592:	f000 fcf7 	bl	8002f84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2240      	movs	r2, #64	; 0x40
 800259e:	4013      	ands	r3, r2
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d137      	bne.n	8002614 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025a4:	f3ef 8310 	mrs	r3, PRIMASK
 80025a8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80025aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ac:	2090      	movs	r0, #144	; 0x90
 80025ae:	183a      	adds	r2, r7, r0
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	2301      	movs	r3, #1
 80025b4:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025b8:	f383 8810 	msr	PRIMASK, r3
}
 80025bc:	46c0      	nop			; (mov r8, r8)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2140      	movs	r1, #64	; 0x40
 80025ca:	438a      	bics	r2, r1
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	183b      	adds	r3, r7, r0
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d6:	f383 8810 	msr	PRIMASK, r3
}
 80025da:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d012      	beq.n	800260a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_UART_IRQHandler+0x2a0>)
 80025ea:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7fe fd5b 	bl	80010ac <HAL_DMA_Abort_IT>
 80025f6:	1e03      	subs	r3, r0, #0
 80025f8:	d01a      	beq.n	8002630 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	0018      	movs	r0, r3
 8002606:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002608:	e012      	b.n	8002630 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	0018      	movs	r0, r3
 800260e:	f000 f9a5 	bl	800295c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002612:	e00d      	b.n	8002630 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	0018      	movs	r0, r3
 8002618:	f000 f9a0 	bl	800295c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800261c:	e008      	b.n	8002630 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f000 f99b 	bl	800295c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2280      	movs	r2, #128	; 0x80
 800262a:	2100      	movs	r1, #0
 800262c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800262e:	e17f      	b.n	8002930 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002630:	46c0      	nop			; (mov r8, r8)
    return;
 8002632:	e17d      	b.n	8002930 <HAL_UART_IRQHandler+0x594>
 8002634:	0000080f 	.word	0x0000080f
 8002638:	04000120 	.word	0x04000120
 800263c:	08003049 	.word	0x08003049

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002644:	2b01      	cmp	r3, #1
 8002646:	d000      	beq.n	800264a <HAL_UART_IRQHandler+0x2ae>
 8002648:	e131      	b.n	80028ae <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800264a:	23a4      	movs	r3, #164	; 0xa4
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2210      	movs	r2, #16
 8002652:	4013      	ands	r3, r2
 8002654:	d100      	bne.n	8002658 <HAL_UART_IRQHandler+0x2bc>
 8002656:	e12a      	b.n	80028ae <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002658:	23a0      	movs	r3, #160	; 0xa0
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2210      	movs	r2, #16
 8002660:	4013      	ands	r3, r2
 8002662:	d100      	bne.n	8002666 <HAL_UART_IRQHandler+0x2ca>
 8002664:	e123      	b.n	80028ae <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2210      	movs	r2, #16
 800266c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2240      	movs	r2, #64	; 0x40
 8002676:	4013      	ands	r3, r2
 8002678:	2b40      	cmp	r3, #64	; 0x40
 800267a:	d000      	beq.n	800267e <HAL_UART_IRQHandler+0x2e2>
 800267c:	e09b      	b.n	80027b6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	217e      	movs	r1, #126	; 0x7e
 8002688:	187b      	adds	r3, r7, r1
 800268a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800268c:	187b      	adds	r3, r7, r1
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d100      	bne.n	8002696 <HAL_UART_IRQHandler+0x2fa>
 8002694:	e14e      	b.n	8002934 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2258      	movs	r2, #88	; 0x58
 800269a:	5a9b      	ldrh	r3, [r3, r2]
 800269c:	187a      	adds	r2, r7, r1
 800269e:	8812      	ldrh	r2, [r2, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d300      	bcc.n	80026a6 <HAL_UART_IRQHandler+0x30a>
 80026a4:	e146      	b.n	8002934 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	187a      	adds	r2, r7, r1
 80026aa:	215a      	movs	r1, #90	; 0x5a
 80026ac:	8812      	ldrh	r2, [r2, #0]
 80026ae:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d06e      	beq.n	8002798 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ba:	f3ef 8310 	mrs	r3, PRIMASK
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80026c4:	2301      	movs	r3, #1
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ca:	f383 8810 	msr	PRIMASK, r3
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	499a      	ldr	r1, [pc, #616]	; (8002944 <HAL_UART_IRQHandler+0x5a8>)
 80026dc:	400a      	ands	r2, r1
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	f383 8810 	msr	PRIMASK, r3
}
 80026ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ec:	f3ef 8310 	mrs	r3, PRIMASK
 80026f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80026f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f4:	677b      	str	r3, [r7, #116]	; 0x74
 80026f6:	2301      	movs	r3, #1
 80026f8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026fc:	f383 8810 	msr	PRIMASK, r3
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2101      	movs	r1, #1
 800270e:	438a      	bics	r2, r1
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002714:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002718:	f383 8810 	msr	PRIMASK, r3
}
 800271c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271e:	f3ef 8310 	mrs	r3, PRIMASK
 8002722:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002724:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002726:	673b      	str	r3, [r7, #112]	; 0x70
 8002728:	2301      	movs	r3, #1
 800272a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800272e:	f383 8810 	msr	PRIMASK, r3
}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2140      	movs	r1, #64	; 0x40
 8002740:	438a      	bics	r2, r1
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002746:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800274a:	f383 8810 	msr	PRIMASK, r3
}
 800274e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275c:	f3ef 8310 	mrs	r3, PRIMASK
 8002760:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002762:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002764:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002766:	2301      	movs	r3, #1
 8002768:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800276a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800276c:	f383 8810 	msr	PRIMASK, r3
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2110      	movs	r1, #16
 800277e:	438a      	bics	r2, r1
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002784:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002788:	f383 8810 	msr	PRIMASK, r3
}
 800278c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	0018      	movs	r0, r3
 8002794:	f7fe fc52 	bl	800103c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2258      	movs	r2, #88	; 0x58
 800279c:	5a9a      	ldrh	r2, [r3, r2]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	215a      	movs	r1, #90	; 0x5a
 80027a2:	5a5b      	ldrh	r3, [r3, r1]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	0011      	movs	r1, r2
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 f8dc 	bl	800296c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027b4:	e0be      	b.n	8002934 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2258      	movs	r2, #88	; 0x58
 80027ba:	5a99      	ldrh	r1, [r3, r2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	225a      	movs	r2, #90	; 0x5a
 80027c0:	5a9b      	ldrh	r3, [r3, r2]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	208e      	movs	r0, #142	; 0x8e
 80027c6:	183b      	adds	r3, r7, r0
 80027c8:	1a8a      	subs	r2, r1, r2
 80027ca:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	225a      	movs	r2, #90	; 0x5a
 80027d0:	5a9b      	ldrh	r3, [r3, r2]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d100      	bne.n	80027da <HAL_UART_IRQHandler+0x43e>
 80027d8:	e0ae      	b.n	8002938 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80027da:	183b      	adds	r3, r7, r0
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d100      	bne.n	80027e4 <HAL_UART_IRQHandler+0x448>
 80027e2:	e0a9      	b.n	8002938 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e4:	f3ef 8310 	mrs	r3, PRIMASK
 80027e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80027ea:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ec:	2488      	movs	r4, #136	; 0x88
 80027ee:	193a      	adds	r2, r7, r4
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	2301      	movs	r3, #1
 80027f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f383 8810 	msr	PRIMASK, r3
}
 80027fc:	46c0      	nop			; (mov r8, r8)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	494f      	ldr	r1, [pc, #316]	; (8002948 <HAL_UART_IRQHandler+0x5ac>)
 800280a:	400a      	ands	r2, r1
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	193b      	adds	r3, r7, r4
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f383 8810 	msr	PRIMASK, r3
}
 800281a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800281c:	f3ef 8310 	mrs	r3, PRIMASK
 8002820:	61bb      	str	r3, [r7, #24]
  return(result);
 8002822:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002824:	2484      	movs	r4, #132	; 0x84
 8002826:	193a      	adds	r2, r7, r4
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	2301      	movs	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f383 8810 	msr	PRIMASK, r3
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	438a      	bics	r2, r1
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	193b      	adds	r3, r7, r4
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	f383 8810 	msr	PRIMASK, r3
}
 8002852:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002866:	f3ef 8310 	mrs	r3, PRIMASK
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800286e:	2480      	movs	r4, #128	; 0x80
 8002870:	193a      	adds	r2, r7, r4
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	2301      	movs	r3, #1
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	f383 8810 	msr	PRIMASK, r3
}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2110      	movs	r1, #16
 800288c:	438a      	bics	r2, r1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	193b      	adds	r3, r7, r4
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	f383 8810 	msr	PRIMASK, r3
}
 800289c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800289e:	183b      	adds	r3, r7, r0
 80028a0:	881a      	ldrh	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	0011      	movs	r1, r2
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 f860 	bl	800296c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028ac:	e044      	b.n	8002938 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80028ae:	23a4      	movs	r3, #164	; 0xa4
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	035b      	lsls	r3, r3, #13
 80028b8:	4013      	ands	r3, r2
 80028ba:	d010      	beq.n	80028de <HAL_UART_IRQHandler+0x542>
 80028bc:	239c      	movs	r3, #156	; 0x9c
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	03db      	lsls	r3, r3, #15
 80028c6:	4013      	ands	r3, r2
 80028c8:	d009      	beq.n	80028de <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	0352      	lsls	r2, r2, #13
 80028d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 fbf8 	bl	80030cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80028dc:	e02f      	b.n	800293e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80028de:	23a4      	movs	r3, #164	; 0xa4
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	4013      	ands	r3, r2
 80028e8:	d00f      	beq.n	800290a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80028ea:	23a0      	movs	r3, #160	; 0xa0
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	4013      	ands	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01e      	beq.n	800293c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	0010      	movs	r0, r2
 8002906:	4798      	blx	r3
    }
    return;
 8002908:	e018      	b.n	800293c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800290a:	23a4      	movs	r3, #164	; 0xa4
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2240      	movs	r2, #64	; 0x40
 8002912:	4013      	ands	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_UART_IRQHandler+0x5a2>
 8002916:	23a0      	movs	r3, #160	; 0xa0
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	4013      	ands	r3, r2
 8002920:	d00d      	beq.n	800293e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0018      	movs	r0, r3
 8002926:	f000 fba6 	bl	8003076 <UART_EndTransmit_IT>
    return;
 800292a:	e008      	b.n	800293e <HAL_UART_IRQHandler+0x5a2>
      return;
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	e006      	b.n	800293e <HAL_UART_IRQHandler+0x5a2>
    return;
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	e004      	b.n	800293e <HAL_UART_IRQHandler+0x5a2>
      return;
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	e002      	b.n	800293e <HAL_UART_IRQHandler+0x5a2>
      return;
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	e000      	b.n	800293e <HAL_UART_IRQHandler+0x5a2>
    return;
 800293c:	46c0      	nop			; (mov r8, r8)
  }

}
 800293e:	46bd      	mov	sp, r7
 8002940:	b02b      	add	sp, #172	; 0xac
 8002942:	bd90      	pop	{r4, r7, pc}
 8002944:	fffffeff 	.word	0xfffffeff
 8002948:	fffffedf 	.word	0xfffffedf

0800294c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b002      	add	sp, #8
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	000a      	movs	r2, r1
 8002976:	1cbb      	adds	r3, r7, #2
 8002978:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	46bd      	mov	sp, r7
 800297e:	b002      	add	sp, #8
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800298c:	231e      	movs	r3, #30
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a8d      	ldr	r2, [pc, #564]	; (8002be8 <UART_SetConfig+0x264>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	0019      	movs	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	430a      	orrs	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a88      	ldr	r2, [pc, #544]	; (8002bec <UART_SetConfig+0x268>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a7f      	ldr	r2, [pc, #508]	; (8002bf0 <UART_SetConfig+0x26c>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	0019      	movs	r1, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a7b      	ldr	r2, [pc, #492]	; (8002bf4 <UART_SetConfig+0x270>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d127      	bne.n	8002a5a <UART_SetConfig+0xd6>
 8002a0a:	4b7b      	ldr	r3, [pc, #492]	; (8002bf8 <UART_SetConfig+0x274>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	2203      	movs	r2, #3
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d00d      	beq.n	8002a32 <UART_SetConfig+0xae>
 8002a16:	d81b      	bhi.n	8002a50 <UART_SetConfig+0xcc>
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d014      	beq.n	8002a46 <UART_SetConfig+0xc2>
 8002a1c:	d818      	bhi.n	8002a50 <UART_SetConfig+0xcc>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <UART_SetConfig+0xa4>
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d00a      	beq.n	8002a3c <UART_SetConfig+0xb8>
 8002a26:	e013      	b.n	8002a50 <UART_SetConfig+0xcc>
 8002a28:	231f      	movs	r3, #31
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	e021      	b.n	8002a76 <UART_SetConfig+0xf2>
 8002a32:	231f      	movs	r3, #31
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	2202      	movs	r2, #2
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e01c      	b.n	8002a76 <UART_SetConfig+0xf2>
 8002a3c:	231f      	movs	r3, #31
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	2204      	movs	r2, #4
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e017      	b.n	8002a76 <UART_SetConfig+0xf2>
 8002a46:	231f      	movs	r3, #31
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e012      	b.n	8002a76 <UART_SetConfig+0xf2>
 8002a50:	231f      	movs	r3, #31
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	2210      	movs	r2, #16
 8002a56:	701a      	strb	r2, [r3, #0]
 8002a58:	e00d      	b.n	8002a76 <UART_SetConfig+0xf2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a67      	ldr	r2, [pc, #412]	; (8002bfc <UART_SetConfig+0x278>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d104      	bne.n	8002a6e <UART_SetConfig+0xea>
 8002a64:	231f      	movs	r3, #31
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	e003      	b.n	8002a76 <UART_SetConfig+0xf2>
 8002a6e:	231f      	movs	r3, #31
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	2210      	movs	r2, #16
 8002a74:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d15d      	bne.n	8002b3e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002a82:	231f      	movs	r3, #31
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d015      	beq.n	8002ab8 <UART_SetConfig+0x134>
 8002a8c:	dc18      	bgt.n	8002ac0 <UART_SetConfig+0x13c>
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d00d      	beq.n	8002aae <UART_SetConfig+0x12a>
 8002a92:	dc15      	bgt.n	8002ac0 <UART_SetConfig+0x13c>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <UART_SetConfig+0x11a>
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d005      	beq.n	8002aa8 <UART_SetConfig+0x124>
 8002a9c:	e010      	b.n	8002ac0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a9e:	f7ff fb35 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	61bb      	str	r3, [r7, #24]
        break;
 8002aa6:	e012      	b.n	8002ace <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002aa8:	4b55      	ldr	r3, [pc, #340]	; (8002c00 <UART_SetConfig+0x27c>)
 8002aaa:	61bb      	str	r3, [r7, #24]
        break;
 8002aac:	e00f      	b.n	8002ace <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aae:	f7ff fabf 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	61bb      	str	r3, [r7, #24]
        break;
 8002ab6:	e00a      	b.n	8002ace <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	61bb      	str	r3, [r7, #24]
        break;
 8002abe:	e006      	b.n	8002ace <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ac4:	231e      	movs	r3, #30
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
        break;
 8002acc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d100      	bne.n	8002ad6 <UART_SetConfig+0x152>
 8002ad4:	e07b      	b.n	8002bce <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	005a      	lsls	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	18d2      	adds	r2, r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	0010      	movs	r0, r2
 8002aea:	f7fd fb0d 	bl	8000108 <__udivsi3>
 8002aee:	0003      	movs	r3, r0
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	d91c      	bls.n	8002b34 <UART_SetConfig+0x1b0>
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	025b      	lsls	r3, r3, #9
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d217      	bcs.n	8002b34 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	200e      	movs	r0, #14
 8002b0a:	183b      	adds	r3, r7, r0
 8002b0c:	210f      	movs	r1, #15
 8002b0e:	438a      	bics	r2, r1
 8002b10:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2207      	movs	r2, #7
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b299      	uxth	r1, r3
 8002b1e:	183b      	adds	r3, r7, r0
 8002b20:	183a      	adds	r2, r7, r0
 8002b22:	8812      	ldrh	r2, [r2, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	183a      	adds	r2, r7, r0
 8002b2e:	8812      	ldrh	r2, [r2, #0]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	e04c      	b.n	8002bce <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002b34:	231e      	movs	r3, #30
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e047      	b.n	8002bce <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b3e:	231f      	movs	r3, #31
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d015      	beq.n	8002b74 <UART_SetConfig+0x1f0>
 8002b48:	dc18      	bgt.n	8002b7c <UART_SetConfig+0x1f8>
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d00d      	beq.n	8002b6a <UART_SetConfig+0x1e6>
 8002b4e:	dc15      	bgt.n	8002b7c <UART_SetConfig+0x1f8>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <UART_SetConfig+0x1d6>
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d005      	beq.n	8002b64 <UART_SetConfig+0x1e0>
 8002b58:	e010      	b.n	8002b7c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b5a:	f7ff fad7 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	61bb      	str	r3, [r7, #24]
        break;
 8002b62:	e012      	b.n	8002b8a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b64:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <UART_SetConfig+0x27c>)
 8002b66:	61bb      	str	r3, [r7, #24]
        break;
 8002b68:	e00f      	b.n	8002b8a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b6a:	f7ff fa61 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	61bb      	str	r3, [r7, #24]
        break;
 8002b72:	e00a      	b.n	8002b8a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	61bb      	str	r3, [r7, #24]
        break;
 8002b7a:	e006      	b.n	8002b8a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b80:	231e      	movs	r3, #30
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
        break;
 8002b88:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01e      	beq.n	8002bce <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	085a      	lsrs	r2, r3, #1
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	18d2      	adds	r2, r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	0010      	movs	r0, r2
 8002ba2:	f7fd fab1 	bl	8000108 <__udivsi3>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b0f      	cmp	r3, #15
 8002bb0:	d909      	bls.n	8002bc6 <UART_SetConfig+0x242>
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	025b      	lsls	r3, r3, #9
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d204      	bcs.n	8002bc6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	e003      	b.n	8002bce <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002bc6:	231e      	movs	r3, #30
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002bda:	231e      	movs	r3, #30
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	781b      	ldrb	r3, [r3, #0]
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b008      	add	sp, #32
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	ffff69f3 	.word	0xffff69f3
 8002bec:	ffffcfff 	.word	0xffffcfff
 8002bf0:	fffff4ff 	.word	0xfffff4ff
 8002bf4:	40013800 	.word	0x40013800
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40004400 	.word	0x40004400
 8002c00:	007a1200 	.word	0x007a1200

08002c04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	2201      	movs	r2, #1
 8002c12:	4013      	ands	r3, r2
 8002c14:	d00b      	beq.n	8002c2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a4a      	ldr	r2, [pc, #296]	; (8002d48 <UART_AdvFeatureConfig+0x144>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	2202      	movs	r2, #2
 8002c34:	4013      	ands	r3, r2
 8002c36:	d00b      	beq.n	8002c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4a43      	ldr	r2, [pc, #268]	; (8002d4c <UART_AdvFeatureConfig+0x148>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	0019      	movs	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	2204      	movs	r2, #4
 8002c56:	4013      	ands	r3, r2
 8002c58:	d00b      	beq.n	8002c72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a3b      	ldr	r2, [pc, #236]	; (8002d50 <UART_AdvFeatureConfig+0x14c>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2208      	movs	r2, #8
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d00b      	beq.n	8002c94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <UART_AdvFeatureConfig+0x150>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2210      	movs	r2, #16
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d00b      	beq.n	8002cb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a2c      	ldr	r2, [pc, #176]	; (8002d58 <UART_AdvFeatureConfig+0x154>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	0019      	movs	r1, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	2220      	movs	r2, #32
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <UART_AdvFeatureConfig+0x158>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2240      	movs	r2, #64	; 0x40
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d01d      	beq.n	8002d1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a1d      	ldr	r2, [pc, #116]	; (8002d60 <UART_AdvFeatureConfig+0x15c>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	035b      	lsls	r3, r3, #13
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d10b      	bne.n	8002d1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <UART_AdvFeatureConfig+0x160>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	0019      	movs	r1, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	4013      	ands	r3, r2
 8002d26:	d00b      	beq.n	8002d40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <UART_AdvFeatureConfig+0x164>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	0019      	movs	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	605a      	str	r2, [r3, #4]
  }
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b002      	add	sp, #8
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	fffdffff 	.word	0xfffdffff
 8002d4c:	fffeffff 	.word	0xfffeffff
 8002d50:	fffbffff 	.word	0xfffbffff
 8002d54:	ffff7fff 	.word	0xffff7fff
 8002d58:	ffffefff 	.word	0xffffefff
 8002d5c:	ffffdfff 	.word	0xffffdfff
 8002d60:	ffefffff 	.word	0xffefffff
 8002d64:	ff9fffff 	.word	0xff9fffff
 8002d68:	fff7ffff 	.word	0xfff7ffff

08002d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2280      	movs	r2, #128	; 0x80
 8002d78:	2100      	movs	r1, #0
 8002d7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d7c:	f7fe f82e 	bl	8000ddc <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d10c      	bne.n	8002dac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	0391      	lsls	r1, r2, #14
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <UART_CheckIdleState+0x8c>)
 8002d9c:	9200      	str	r2, [sp, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f000 f82c 	bl	8002dfc <UART_WaitOnFlagUntilTimeout>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d001      	beq.n	8002dac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e021      	b.n	8002df0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2204      	movs	r2, #4
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d10c      	bne.n	8002dd4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2280      	movs	r2, #128	; 0x80
 8002dbe:	03d1      	lsls	r1, r2, #15
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4a0d      	ldr	r2, [pc, #52]	; (8002df8 <UART_CheckIdleState+0x8c>)
 8002dc4:	9200      	str	r2, [sp, #0]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f000 f818 	bl	8002dfc <UART_WaitOnFlagUntilTimeout>
 8002dcc:	1e03      	subs	r3, r0, #0
 8002dce:	d001      	beq.n	8002dd4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e00d      	b.n	8002df0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2274      	movs	r2, #116	; 0x74
 8002dea:	2100      	movs	r1, #0
 8002dec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b004      	add	sp, #16
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	01ffffff 	.word	0x01ffffff

08002dfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b094      	sub	sp, #80	; 0x50
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	1dfb      	adds	r3, r7, #7
 8002e0a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0c:	e0a3      	b.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e10:	3301      	adds	r3, #1
 8002e12:	d100      	bne.n	8002e16 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002e14:	e09f      	b.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7fd ffe1 	bl	8000ddc <HAL_GetTick>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d13d      	bne.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e34:	647b      	str	r3, [r7, #68]	; 0x44
 8002e36:	2301      	movs	r3, #1
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	f383 8810 	msr	PRIMASK, r3
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	494c      	ldr	r1, [pc, #304]	; (8002f80 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002e4e:	400a      	ands	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e54:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	f383 8810 	msr	PRIMASK, r3
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e66:	643b      	str	r3, [r7, #64]	; 0x40
 8002e68:	2301      	movs	r3, #1
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6e:	f383 8810 	msr	PRIMASK, r3
}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2101      	movs	r1, #1
 8002e80:	438a      	bics	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8a:	f383 8810 	msr	PRIMASK, r3
}
 8002e8e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2274      	movs	r2, #116	; 0x74
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e067      	b.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2204      	movs	r2, #4
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d050      	beq.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d146      	bne.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2280      	movs	r2, #128	; 0x80
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed6:	613b      	str	r3, [r7, #16]
  return(result);
 8002ed8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002edc:	2301      	movs	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f383 8810 	msr	PRIMASK, r3
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4923      	ldr	r1, [pc, #140]	; (8002f80 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f383 8810 	msr	PRIMASK, r3
}
 8002f02:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f04:	f3ef 8310 	mrs	r3, PRIMASK
 8002f08:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f0a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f0e:	2301      	movs	r3, #1
 8002f10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	f383 8810 	msr	PRIMASK, r3
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2101      	movs	r1, #1
 8002f26:	438a      	bics	r2, r1
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	f383 8810 	msr	PRIMASK, r3
}
 8002f34:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	2120      	movs	r1, #32
 8002f48:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2274      	movs	r2, #116	; 0x74
 8002f4e:	2100      	movs	r1, #0
 8002f50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e010      	b.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	425a      	negs	r2, r3
 8002f66:	4153      	adcs	r3, r2
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	001a      	movs	r2, r3
 8002f6c:	1dfb      	adds	r3, r7, #7
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d100      	bne.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002f74:	e74b      	b.n	8002e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	0018      	movs	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b014      	add	sp, #80	; 0x50
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	fffffe5f 	.word	0xfffffe5f

08002f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08e      	sub	sp, #56	; 0x38
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f90:	617b      	str	r3, [r7, #20]
  return(result);
 8002f92:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f94:	637b      	str	r3, [r7, #52]	; 0x34
 8002f96:	2301      	movs	r3, #1
 8002f98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f383 8810 	msr	PRIMASK, r3
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4925      	ldr	r1, [pc, #148]	; (8003044 <UART_EndRxTransfer+0xc0>)
 8002fae:	400a      	ands	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f383 8810 	msr	PRIMASK, r3
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc2:	623b      	str	r3, [r7, #32]
  return(result);
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc8:	2301      	movs	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	f383 8810 	msr	PRIMASK, r3
}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2101      	movs	r1, #1
 8002fe0:	438a      	bics	r2, r1
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	f383 8810 	msr	PRIMASK, r3
}
 8002fee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d118      	bne.n	800302a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ffc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003002:	2301      	movs	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f383 8810 	msr	PRIMASK, r3
}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2110      	movs	r1, #16
 800301a:	438a      	bics	r2, r1
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f383 8810 	msr	PRIMASK, r3
}
 8003028:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b00e      	add	sp, #56	; 0x38
 8003042:	bd80      	pop	{r7, pc}
 8003044:	fffffedf 	.word	0xfffffedf

08003048 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	225a      	movs	r2, #90	; 0x5a
 800305a:	2100      	movs	r1, #0
 800305c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2252      	movs	r2, #82	; 0x52
 8003062:	2100      	movs	r1, #0
 8003064:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	0018      	movs	r0, r3
 800306a:	f7ff fc77 	bl	800295c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	b004      	add	sp, #16
 8003074:	bd80      	pop	{r7, pc}

08003076 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800307e:	f3ef 8310 	mrs	r3, PRIMASK
 8003082:	60bb      	str	r3, [r7, #8]
  return(result);
 8003084:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	2301      	movs	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f383 8810 	msr	PRIMASK, r3
}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2140      	movs	r1, #64	; 0x40
 80030a0:	438a      	bics	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f383 8810 	msr	PRIMASK, r3
}
 80030ae:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	0018      	movs	r0, r3
 80030c0:	f7ff fc44 	bl	800294c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b006      	add	sp, #24
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b002      	add	sp, #8
 80030da:	bd80      	pop	{r7, pc}

080030dc <__libc_init_array>:
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	2600      	movs	r6, #0
 80030e0:	4d0c      	ldr	r5, [pc, #48]	; (8003114 <__libc_init_array+0x38>)
 80030e2:	4c0d      	ldr	r4, [pc, #52]	; (8003118 <__libc_init_array+0x3c>)
 80030e4:	1b64      	subs	r4, r4, r5
 80030e6:	10a4      	asrs	r4, r4, #2
 80030e8:	42a6      	cmp	r6, r4
 80030ea:	d109      	bne.n	8003100 <__libc_init_array+0x24>
 80030ec:	2600      	movs	r6, #0
 80030ee:	f000 f821 	bl	8003134 <_init>
 80030f2:	4d0a      	ldr	r5, [pc, #40]	; (800311c <__libc_init_array+0x40>)
 80030f4:	4c0a      	ldr	r4, [pc, #40]	; (8003120 <__libc_init_array+0x44>)
 80030f6:	1b64      	subs	r4, r4, r5
 80030f8:	10a4      	asrs	r4, r4, #2
 80030fa:	42a6      	cmp	r6, r4
 80030fc:	d105      	bne.n	800310a <__libc_init_array+0x2e>
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
 8003100:	00b3      	lsls	r3, r6, #2
 8003102:	58eb      	ldr	r3, [r5, r3]
 8003104:	4798      	blx	r3
 8003106:	3601      	adds	r6, #1
 8003108:	e7ee      	b.n	80030e8 <__libc_init_array+0xc>
 800310a:	00b3      	lsls	r3, r6, #2
 800310c:	58eb      	ldr	r3, [r5, r3]
 800310e:	4798      	blx	r3
 8003110:	3601      	adds	r6, #1
 8003112:	e7f2      	b.n	80030fa <__libc_init_array+0x1e>
 8003114:	080031c4 	.word	0x080031c4
 8003118:	080031c4 	.word	0x080031c4
 800311c:	080031c4 	.word	0x080031c4
 8003120:	080031c8 	.word	0x080031c8

08003124 <memset>:
 8003124:	0003      	movs	r3, r0
 8003126:	1882      	adds	r2, r0, r2
 8003128:	4293      	cmp	r3, r2
 800312a:	d100      	bne.n	800312e <memset+0xa>
 800312c:	4770      	bx	lr
 800312e:	7019      	strb	r1, [r3, #0]
 8003130:	3301      	adds	r3, #1
 8003132:	e7f9      	b.n	8003128 <memset+0x4>

08003134 <_init>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr

08003140 <_fini>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr
